## SimpleFogOfWar - Implementa√ß√£o Simples de Fog of War
## Apenas dom√≠nios fornecem visibilidade: 7 estrelas + 12 losangos
## Cada team tem sua pr√≥pria fog of war

class_name SimpleFogOfWar
extends RefCounted

## Verificar se estrela √© vis√≠vel baseado nos dom√≠nios
static func is_star_visible(star_id: int, domains: Array, dot_positions: Array) -> bool:
	if star_id >= dot_positions.size():
		return false
	
	var star_pos = dot_positions[star_id]
	
	# Debug: log primeira verifica√ß√£o
	if star_id == 0:
		print("üîç FOG DEBUG: Verificando visibilidade de %d estrelas com %d dom√≠nios" % [dot_positions.size(), domains.size()])
	
	# Verificar se a estrela est√° dentro da visibilidade de algum dom√≠nio
	for domain in domains:
		if _is_star_in_domain_visibility(star_pos, domain, dot_positions):
			return true
	
	return false

## Verificar se hex√°gono √© vis√≠vel baseado nos dom√≠nios
static func is_hex_visible(hex_pos: Vector2, domains: Array) -> bool:
	# Verificar se o hex est√° dentro da visibilidade de algum dom√≠nio
	for domain in domains:
		if _is_hex_in_domain_visibility(hex_pos, domain):
			return true
	
	return false

## Verificar se estrela est√° na visibilidade do dom√≠nio (7 estrelas)
static func _is_star_in_domain_visibility(star_pos: Vector2, domain, dot_positions: Array) -> bool:
	# Obter posi√ß√£o central do dom√≠nio
	var domain_center_id = domain.get_center_star_id()
	
	if domain_center_id < 0 or domain_center_id >= dot_positions.size():
		return false
	
	var domain_center = dot_positions[domain_center_id]
	
	# Verificar se √© a estrela central
	if star_pos.distance_to(domain_center) < 5.0:
		return true
	
	# Verificar se √© uma das 6 estrelas adjacentes
	var distance = star_pos.distance_to(domain_center)
	var is_visible = distance <= 40.0  # Dist√¢ncia de adjac√™ncia
	
	# Debug: log algumas verifica√ß√µes
	if domain_center_id == 0 and distance <= 50.0:  # Log apenas para o primeiro dom√≠nio e estrelas pr√≥ximas
		print("üîç Estrela dist=%.1f do centro dom√≠nio %d: %s" % [distance, domain_center_id, "VIS√çVEL" if is_visible else "OCULTA"])
	
	return is_visible

## Verificar se hex est√° na visibilidade do dom√≠nio (12 losangos)
static func _is_hex_in_domain_visibility(hex_pos: Vector2, domain) -> bool:
	# Obter v√©rtices do dom√≠nio (12 losangos)
	var domain_vertices = domain.get_vertices()
	
	# Debug: log primeira verifica√ß√£o
	if domain.get_center_star_id() == 0:  # Log apenas para o primeiro dom√≠nio
		print("üîç Dom√≠nio %d tem %d v√©rtices" % [domain.get_center_star_id(), domain_vertices.size()])
	
	# Verificar se o hex √© um dos v√©rtices do dom√≠nio
	for vertex in domain_vertices:
		if hex_pos.distance_to(vertex) < 15.0:  # Toler√¢ncia para posi√ß√£o
			return true
	
	return false