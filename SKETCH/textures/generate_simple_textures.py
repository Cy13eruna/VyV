#!/usr/bin/env python3
"""
Gerador Simples de Texturas V&V
Cria texturas PNG b√°sicas sem depend√™ncias externas
"""

import os

def create_simple_png(filename, width=256, height=256, pattern_type="field"):
    """Cria um arquivo PNG simples usando dados bin√°rios"""
    
    # Cabe√ßalho PNG
    png_signature = b'\x89PNG\r\n\x1a\n'
    
    # Dados da imagem (RGB simples)
    if pattern_type == "field":
        # Verde claro com padr√£o
        data = create_field_pattern(width, height)
    elif pattern_type == "forest":
        # Verde escuro com padr√£o
        data = create_forest_pattern(width, height)
    elif pattern_type == "mountain":
        # Cinza com padr√£o
        data = create_mountain_pattern(width, height)
    elif pattern_type == "water":
        # Azul com padr√£o
        data = create_water_pattern(width, height)
    else:
        # Padr√£o padr√£o
        data = create_default_pattern(width, height)
    
    # Criar arquivo PNG b√°sico (simplificado)
    with open(filename, 'wb') as f:
        f.write(png_signature)
        # Escrever dados da imagem (simplificado)
        # Nota: Este √© um PNG muito b√°sico, pode n√£o funcionar em todos os casos
        f.write(data)

def create_field_pattern(width, height):
    """Cria padr√£o de campo (verde claro)"""
    data = bytearray()
    for y in range(height):
        for x in range(width):
            # Verde claro com varia√ß√£o
            if (x + y) % 10 < 3:  # Padr√£o de pontos
                r, g, b = 80, 150, 80    # Verde escuro (s√≠mbolos)
            else:
                r, g, b = 200, 230, 200  # Verde claro (fundo)
            data.extend([r, g, b])
    return bytes(data)

def create_forest_pattern(width, height):
    """Cria padr√£o de floresta (verde escuro)"""
    data = bytearray()
    for y in range(height):
        for x in range(width):
            # Verde escuro com varia√ß√£o
            if (x % 20 < 8) and (y % 20 < 8):  # Padr√£o de √°rvores
                r, g, b = 30, 180, 30    # Verde brilhante (√°rvores)
            else:
                r, g, b = 50, 100, 50    # Verde escuro (fundo)
            data.extend([r, g, b])
    return bytes(data)

def create_mountain_pattern(width, height):
    """Cria padr√£o de montanha (cinza)"""
    data = bytearray()
    for y in range(height):
        for x in range(width):
            # Cinza com varia√ß√£o
            if (x + y) % 25 < 12:  # Padr√£o de montanhas
                r, g, b = 100, 100, 120  # Cinza escuro (montanhas)
            else:
                r, g, b = 180, 180, 200  # Cinza claro (fundo)
            data.extend([r, g, b])
    return bytes(data)

def create_water_pattern(width, height):
    """Cria padr√£o de √°gua (azul)"""
    data = bytearray()
    for y in range(height):
        for x in range(width):
            # Azul com varia√ß√£o
            if y % 15 < 3:  # Padr√£o de ondas
                r, g, b = 30, 100, 180   # Azul escuro (ondas)
            else:
                r, g, b = 80, 150, 200   # Azul claro (fundo)
            data.extend([r, g, b])
    return bytes(data)

def create_default_pattern(width, height):
    """Cria padr√£o padr√£o"""
    data = bytearray()
    for y in range(height):
        for x in range(width):
            r, g, b = 128, 128, 128  # Cinza
            data.extend([r, g, b])
    return bytes(data)

def main():
    print("üé® Gerando texturas simples...")
    
    # Criar texturas para cada tipo de terreno
    textures = [
        ("field/texture.png", "field"),
        ("forest/texture.png", "forest"),
        ("mountain/texture.png", "mountain"),
        ("water/texture.png", "water")
    ]
    
    for filename, pattern_type in textures:
        try:
            create_simple_png(filename, 256, 256, pattern_type)
            print(f"‚úÖ Criada: {filename}")
        except Exception as e:
            print(f"‚ùå Erro ao criar {filename}: {e}")
    
    print("üéâ Gera√ß√£o de texturas conclu√≠da!")

if __name__ == "__main__":
    main()