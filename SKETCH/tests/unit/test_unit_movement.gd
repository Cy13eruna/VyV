## Test Unit Movement - Testes de Movimento de Unidades\n## Cobertura: GameManager, movimento, validação, posicionamento\n\nextends \"res://tests/test_framework.gd\"\n\nconst GameManagerClass = preload(\"res://scripts/game/game_manager.gd\")\nconst ResultClass = preload(\"res://scripts/core/result.gd\")\n\n# Mock classes para testes\nclass MockHexGrid:\n\tvar dot_positions = [\n\t\tVector2(0, 0),    # Star 0\n\t\tVector2(30, 0),   # Star 1\n\t\tVector2(60, 0),   # Star 2\n\t\tVector2(0, 30),   # Star 3\n\t\tVector2(30, 30)   # Star 4\n\t]\n\t\n\tvar cache = MockCache.new()\n\t\n\tfunc get_dot_positions():\n\t\treturn dot_positions\n\t\n\tfunc has_method(method_name):\n\t\treturn method_name == \"cache\"\n\nclass MockCache:\n\tvar diamond_colors = [\n\t\tColor(0.0, 1.0, 0.0, 1.0),  # Verde - livre\n\t\tColor(0.0, 1.0, 0.0, 1.0),  # Verde - livre\n\t\tColor(0.0, 1.0, 1.0, 1.0),  # Azul - água\n\t\tColor(0.0, 1.0, 0.0, 1.0)   # Verde - livre\n\t]\n\t\n\tvar connections = [\n\t\t{\"index_a\": 0, \"index_b\": 1},\n\t\t{\"index_a\": 1, \"index_b\": 2},\n\t\t{\"index_a\": 2, \"index_b\": 3},\n\t\t{\"index_a\": 3, \"index_b\": 4}\n\t]\n\t\n\tfunc get_diamond_colors():\n\t\treturn diamond_colors\n\t\n\tfunc get_connections():\n\t\treturn connections\n\nclass MockStarMapper:\n\tpass\n\nclass MockParentNode:\n\tpass\n\nclass MockUnit:\n\tvar current_star_id: int = -1\n\tvar setup_called = false\n\tvar visual_created = false\n\tvar positioned = false\n\tvar cleanup_called = false\n\t\n\tfunc setup_references(hex_grid, star_mapper):\n\t\tsetup_called = true\n\t\treturn true\n\t\n\tfunc create_visual(parent_node):\n\t\tvisual_created = true\n\t\treturn true\n\t\n\tfunc position_at_star(star_id: int):\n\t\tcurrent_star_id = star_id\n\t\tpositioned = true\n\t\treturn true\n\t\n\tfunc get_current_star_id():\n\t\treturn current_star_id\n\t\n\tfunc move_to_star(star_id: int):\n\t\tif star_id >= 0:\n\t\t\tcurrent_star_id = star_id\n\t\t\treturn true\n\t\treturn false\n\t\n\tfunc cleanup():\n\t\tcleanup_called = true\n\t\n\tfunc set_color(color: Color):\n\t\tpass\n\nvar game_manager: GameManagerClass\nvar mock_hex_grid: MockHexGrid\nvar mock_star_mapper: MockStarMapper\nvar mock_parent_node: MockParentNode\n\nfunc setup():\n\t# Setup para cada teste\n\tmock_hex_grid = MockHexGrid.new()\n\tmock_star_mapper = MockStarMapper.new()\n\tmock_parent_node = MockParentNode.new()\n\t\n\tgame_manager = GameManagerClass.new()\n\tvar setup_result = game_manager.setup_references(mock_hex_grid, mock_star_mapper, mock_parent_node)\n\tassert_true(setup_result.is_success(), \"Setup deve ser bem-sucedido\")\n\nfunc test_game_manager_setup():\n\t# Teste de configuração do GameManager\n\tsetup()\n\t\n\tassert_not_null(game_manager, \"GameManager deve ser criado\")\n\tassert_not_null(game_manager.hex_grid_ref, \"HexGrid deve ser configurado\")\n\tassert_not_null(game_manager.star_mapper_ref, \"StarMapper deve ser configurado\")\n\tassert_not_null(game_manager.shared_game_state, \"SharedGameState deve ser criado\")\n\nfunc test_unit_creation_with_positioning():\n\t# Teste de criação de unidade com posicionamento\n\tsetup()\n\t\n\t# Substituir Unit.new() por MockUnit\n\tvar original_unit_class = load(\"res://scripts/entities/unit.gd\")\n\t\n\t# Criar unidade na estrela 0\n\tvar result = game_manager.create_unit(0)\n\tassert_true(result.is_success(), \"Criação de unidade deve ser bem-sucedida\")\n\t\n\tvar unit = result.get_value()\n\tassert_not_null(unit, \"Unidade deve ser criada\")\n\t\n\t# Verificar se foi adicionada à lista\n\tvar all_units = game_manager.get_all_units()\n\tassert_equal(all_units.size(), 1, \"Deve haver 1 unidade\")\n\nfunc test_unit_creation_without_star():\n\t# Teste de criação de unidade sem estrela específica\n\tsetup()\n\t\n\tvar result = game_manager.create_unit()\n\tassert_true(result.is_success(), \"Criação sem estrela deve ser bem-sucedida\")\n\t\n\tvar unit = result.get_value()\n\tassert_not_null(unit, \"Unidade deve ser criada\")\n\nfunc test_get_valid_adjacent_stars():\n\t# Teste de obtenção de estrelas adjacentes válidas\n\tsetup()\n\t\n\t# Criar unidade na estrela 0\n\tvar unit_result = game_manager.create_unit(0)\n\tassert_true(unit_result.is_success(), \"Unidade deve ser criada\")\n\t\n\tvar unit = unit_result.get_value()\n\tvar adjacent_stars = game_manager.get_valid_adjacent_stars(unit)\n\t\n\tassert_true(adjacent_stars.size() > 0, \"Deve haver estrelas adjacentes\")\n\tassert_true(adjacent_stars is Array, \"Resultado deve ser um Array\")\n\nfunc test_get_valid_adjacent_stars_with_terrain_blocking():\n\t# Teste de estrelas adjacentes com bloqueio de terreno\n\tsetup()\n\t\n\t# Criar unidade na estrela 1\n\tvar unit_result = game_manager.create_unit(1)\n\tvar unit = unit_result.get_value()\n\t\n\tvar adjacent_stars = game_manager.get_valid_adjacent_stars(unit)\n\t\n\t# Estrela 2 deve estar bloqueada por água\n\tassert_false(2 in adjacent_stars, \"Estrela 2 deve estar bloqueada por água\")\n\nfunc test_get_valid_adjacent_stars_with_occupation():\n\t# Teste de estrelas adjacentes com ocupação\n\tsetup()\n\t\n\t# Criar duas unidades\n\tvar unit1_result = game_manager.create_unit(0)\n\tvar unit2_result = game_manager.create_unit(1)\n\t\n\tvar unit1 = unit1_result.get_value()\n\tvar adjacent_stars = game_manager.get_valid_adjacent_stars(unit1)\n\t\n\t# Estrela 1 deve estar ocupada pela unit2\n\tassert_false(1 in adjacent_stars, \"Estrela 1 deve estar ocupada\")\n\nfunc test_move_unit_to_star_success():\n\t# Teste de movimento bem-sucedido\n\tsetup()\n\t\n\t# Criar unidade na estrela 0\n\tvar unit_result = game_manager.create_unit(0)\n\tvar unit = unit_result.get_value()\n\t\n\t# Tentar mover para estrela adjacente válida\n\tvar adjacent_stars = game_manager.get_valid_adjacent_stars(unit)\n\tif adjacent_stars.size() > 0:\n\t\tvar target_star = adjacent_stars[0]\n\t\tvar move_success = game_manager.move_unit_to_star(unit, target_star)\n\t\tassert_true(move_success, \"Movimento deve ser bem-sucedido\")\n\nfunc test_move_unit_to_star_invalid_destination():\n\t# Teste de movimento para destino inválido\n\tsetup()\n\t\n\t# Criar unidade na estrela 0\n\tvar unit_result = game_manager.create_unit(0)\n\tvar unit = unit_result.get_value()\n\t\n\t# Tentar mover para estrela inválida\n\tvar move_success = game_manager.move_unit_to_star(unit, 999)\n\tassert_false(move_success, \"Movimento para estrela inválida deve falhar\")\n\nfunc test_move_unit_to_star_blocked_by_terrain():\n\t# Teste de movimento bloqueado por terreno\n\tsetup()\n\t\n\t# Criar unidade na estrela 1\n\tvar unit_result = game_manager.create_unit(1)\n\tvar unit = unit_result.get_value()\n\t\n\t# Tentar mover para estrela 2 (bloqueada por água)\n\tvar move_success = game_manager.move_unit_to_star(unit, 2)\n\tassert_false(move_success, \"Movimento através de água deve falhar\")\n\nfunc test_move_unit_to_star_occupied():\n\t# Teste de movimento para estrela ocupada\n\tsetup()\n\t\n\t# Criar duas unidades\n\tvar unit1_result = game_manager.create_unit(0)\n\tvar unit2_result = game_manager.create_unit(1)\n\t\n\tvar unit1 = unit1_result.get_value()\n\t\n\t# Tentar mover unit1 para estrela ocupada por unit2\n\tvar move_success = game_manager.move_unit_to_star(unit1, 1)\n\tassert_false(move_success, \"Movimento para estrela ocupada deve falhar\")\n\nfunc test_get_unit_at_star():\n\t# Teste de obtenção de unidade em estrela específica\n\tsetup()\n\t\n\t# Criar unidade na estrela 2\n\tvar unit_result = game_manager.create_unit(2)\n\tvar unit = unit_result.get_value()\n\t\n\t# Verificar se a unidade está na estrela correta\n\tvar found_unit = game_manager.get_unit_at_star(2)\n\tassert_equal(found_unit, unit, \"Deve encontrar a unidade na estrela 2\")\n\t\n\t# Verificar estrela vazia\n\tvar empty_unit = game_manager.get_unit_at_star(4)\n\tassert_null(empty_unit, \"Estrela 4 deve estar vazia\")\n\nfunc test_multiple_units_management():\n\t# Teste de gerenciamento de múltiplas unidades\n\tsetup()\n\t\n\t# Criar várias unidades\n\tvar unit1_result = game_manager.create_unit(0)\n\tvar unit2_result = game_manager.create_unit(3)\n\tvar unit3_result = game_manager.create_unit(4)\n\t\n\tassert_true(unit1_result.is_success(), \"Unidade 1 deve ser criada\")\n\tassert_true(unit2_result.is_success(), \"Unidade 2 deve ser criada\")\n\tassert_true(unit3_result.is_success(), \"Unidade 3 deve ser criada\")\n\t\n\t# Verificar total de unidades\n\tvar all_units = game_manager.get_all_units()\n\tassert_equal(all_units.size(), 3, \"Deve haver 3 unidades\")\n\nfunc test_unit_cleanup():\n\t# Teste de limpeza de unidades\n\tsetup()\n\t\n\t# Criar algumas unidades\n\tgame_manager.create_unit(0)\n\tgame_manager.create_unit(1)\n\t\n\t# Verificar que foram criadas\n\tvar units_before = game_manager.get_all_units()\n\tassert_equal(units_before.size(), 2, \"Deve haver 2 unidades antes da limpeza\")\n\t\n\t# Limpar todas as unidades\n\tgame_manager.clear_all_units()\n\t\n\t# Verificar que foram removidas\n\tvar units_after = game_manager.get_all_units()\n\tassert_equal(units_after.size(), 0, \"Deve haver 0 unidades após limpeza\")\n\nfunc test_movement_validation_edge_cases():\n\t# Teste de casos extremos de validação de movimento\n\tsetup()\n\t\n\t# Criar unidade\n\tvar unit_result = game_manager.create_unit(0)\n\tvar unit = unit_result.get_value()\n\t\n\t# Teste com unidade null\n\tvar adjacent_null = game_manager.get_valid_adjacent_stars(null)\n\tassert_equal(adjacent_null.size(), 0, \"Unidade null deve retornar array vazio\")\n\t\n\t# Teste de movimento com unidade null\n\tvar move_null = game_manager.move_unit_to_star(null, 1)\n\tassert_false(move_null, \"Movimento com unidade null deve falhar\")\n\nfunc test_unit_positioning_validation():\n\t# Teste de validação de posicionamento\n\tsetup()\n\t\n\t# Criar unidade com estrela inválida\n\tvar invalid_result = game_manager.create_unit(-1)\n\tassert_true(invalid_result.is_success(), \"Criação com estrela -1 deve ser bem-sucedida (sem posicionamento)\")\n\t\n\t# Criar unidade com estrela fora dos limites\n\tvar out_of_bounds_result = game_manager.create_unit(999)\n\t# Dependendo da implementação, pode falhar ou ser bem-sucedida\n\tassert_not_null(out_of_bounds_result, \"Resultado deve existir\")\n\nfunc run_all_tests():\n\tprint(\"🧪 Executando Testes de Movimento de Unidades...\")\n\t\n\ttest_game_manager_setup()\n\ttest_unit_creation_with_positioning()\n\ttest_unit_creation_without_star()\n\ttest_get_valid_adjacent_stars()\n\ttest_get_valid_adjacent_stars_with_terrain_blocking()\n\ttest_get_valid_adjacent_stars_with_occupation()\n\ttest_move_unit_to_star_success()\n\ttest_move_unit_to_star_invalid_destination()\n\ttest_move_unit_to_star_blocked_by_terrain()\n\ttest_move_unit_to_star_occupied()\n\ttest_get_unit_at_star()\n\ttest_multiple_units_management()\n\ttest_unit_cleanup()\n\ttest_movement_validation_edge_cases()\n\ttest_unit_positioning_validation()\n\t\n\tprint(\"✅ Todos os testes de Movimento de Unidades passaram!\")\n"