## Performance Profiler - Sistema de Monitoramento de Performance\n## Monitora FPS, mem√≥ria, tempo de execu√ß√£o e gargalos\n\nclass_name PerformanceProfiler\nextends RefCounted\n\n# Singleton pattern\nstatic var instance: PerformanceProfiler\n\n# M√©tricas de performance\nvar fps_history: Array = []\nvar memory_history: Array = []\nvar frame_times: Array = []\nvar method_timings: Dictionary = {}\nvar active_timers: Dictionary = {}\n\n# Configura√ß√µes\nvar max_history_size: int = 300  # 5 segundos a 60 FPS\nvar enable_profiling: bool = true\nvar enable_detailed_logging: bool = false\n\n# Estat√≠sticas\nvar total_frames: int = 0\nvar peak_memory: int = 0\nvar worst_frame_time: float = 0.0\nvar performance_warnings: Array = []\n\n# Thresholds para alertas\nvar fps_warning_threshold: float = 30.0\nvar memory_warning_threshold: int = 512 * 1024 * 1024  # 512MB\nvar frame_time_warning_threshold: float = 33.33  # ~30 FPS\n\nstatic func get_instance() -> PerformanceProfiler:\n\tif not instance:\n\t\tinstance = PerformanceProfiler.new()\n\treturn instance\n\nfunc _init():\n\tif not instance:\n\t\tinstance = self\n\nfunc start_profiling():\n\t\"\"\"Inicia o profiling de performance\"\"\"\n\tenable_profiling = true\n\tprint(\"üîç Performance Profiler iniciado\")\n\nfunc stop_profiling():\n\t\"\"\"Para o profiling de performance\"\"\"\n\tenable_profiling = false\n\tprint(\"‚èπÔ∏è Performance Profiler parado\")\n\nfunc update_metrics():\n\t\"\"\"Atualiza m√©tricas de performance (chamar a cada frame)\"\"\"\n\tif not enable_profiling:\n\t\treturn\n\t\n\ttotal_frames += 1\n\t\n\t# FPS\n\tvar current_fps = Engine.get_frames_per_second()\n\tfps_history.append(current_fps)\n\t\n\t# Mem√≥ria\n\tvar current_memory = OS.get_static_memory_usage_by_type()\n\tvar total_memory = 0\n\tfor memory_type in current_memory.values():\n\t\ttotal_memory += memory_type\n\tmemory_history.append(total_memory)\n\t\n\t# Frame time\n\tvar frame_time = Performance.get_monitor(Performance.TIME_PROCESS) * 1000  # ms\n\tframe_times.append(frame_time)\n\t\n\t# Manter hist√≥rico limitado\n\tif fps_history.size() > max_history_size:\n\t\tfps_history.pop_front()\n\tif memory_history.size() > max_history_size:\n\t\tmemory_history.pop_front()\n\tif frame_times.size() > max_history_size:\n\t\tframe_times.pop_front()\n\t\n\t# Atualizar picos\n\tif total_memory > peak_memory:\n\t\tpeak_memory = total_memory\n\tif frame_time > worst_frame_time:\n\t\tworst_frame_time = frame_time\n\t\n\t# Verificar alertas\n\t_check_performance_warnings(current_fps, total_memory, frame_time)\n\nfunc start_timer(timer_name: String):\n\t\"\"\"Inicia um timer para medir tempo de execu√ß√£o\"\"\"\n\tif not enable_profiling:\n\t\treturn\n\t\n\tactive_timers[timer_name] = Time.get_ticks_usec()\n\nfunc end_timer(timer_name: String) -> float:\n\t\"\"\"Termina um timer e retorna o tempo decorrido em ms\"\"\"\n\tif not enable_profiling or not active_timers.has(timer_name):\n\t\treturn 0.0\n\t\n\tvar start_time = active_timers[timer_name]\n\tvar end_time = Time.get_ticks_usec()\n\tvar duration_ms = (end_time - start_time) / 1000.0\n\t\n\t# Armazenar timing\n\tif not method_timings.has(timer_name):\n\t\tmethod_timings[timer_name] = []\n\t\n\tmethod_timings[timer_name].append(duration_ms)\n\t\n\t# Manter hist√≥rico limitado\n\tif method_timings[timer_name].size() > max_history_size:\n\t\tmethod_timings[timer_name].pop_front()\n\t\n\tactive_timers.erase(timer_name)\n\t\n\tif enable_detailed_logging:\n\t\tprint(\"‚è±Ô∏è %s: %.2f ms\" % [timer_name, duration_ms])\n\t\n\treturn duration_ms\n\nfunc profile_method(method_name: String, callable: Callable):\n\t\"\"\"Executa um m√©todo e mede seu tempo de execu√ß√£o\"\"\"\n\tstart_timer(method_name)\n\tvar result = callable.call()\n\tend_timer(method_name)\n\treturn result\n\nfunc get_fps_stats() -> Dictionary:\n\t\"\"\"Retorna estat√≠sticas de FPS\"\"\"\n\tif fps_history.is_empty():\n\t\treturn {\"current\": 0, \"average\": 0, \"min\": 0, \"max\": 0}\n\t\n\tvar current_fps = fps_history[-1]\n\tvar total = 0.0\n\tvar min_fps = fps_history[0]\n\tvar max_fps = fps_history[0]\n\t\n\tfor fps in fps_history:\n\t\ttotal += fps\n\t\tif fps < min_fps:\n\t\t\tmin_fps = fps\n\t\tif fps > max_fps:\n\t\t\tmax_fps = fps\n\t\n\treturn {\n\t\t\"current\": current_fps,\n\t\t\"average\": total / fps_history.size(),\n\t\t\"min\": min_fps,\n\t\t\"max\": max_fps\n\t}\n\nfunc get_memory_stats() -> Dictionary:\n\t\"\"\"Retorna estat√≠sticas de mem√≥ria\"\"\"\n\tif memory_history.is_empty():\n\t\treturn {\"current\": 0, \"average\": 0, \"peak\": 0, \"current_mb\": 0, \"peak_mb\": 0}\n\t\n\tvar current_memory = memory_history[-1]\n\tvar total = 0\n\t\n\tfor memory in memory_history:\n\t\ttotal += memory\n\t\n\treturn {\n\t\t\"current\": current_memory,\n\t\t\"average\": total / memory_history.size(),\n\t\t\"peak\": peak_memory,\n\t\t\"current_mb\": current_memory / (1024 * 1024),\n\t\t\"peak_mb\": peak_memory / (1024 * 1024)\n\t}\n\nfunc get_frame_time_stats() -> Dictionary:\n\t\"\"\"Retorna estat√≠sticas de frame time\"\"\"\n\tif frame_times.is_empty():\n\t\treturn {\"current\": 0, \"average\": 0, \"worst\": 0}\n\t\n\tvar current_frame_time = frame_times[-1]\n\tvar total = 0.0\n\t\n\tfor frame_time in frame_times:\n\t\ttotal += frame_time\n\t\n\treturn {\n\t\t\"current\": current_frame_time,\n\t\t\"average\": total / frame_times.size(),\n\t\t\"worst\": worst_frame_time\n\t}\n\nfunc get_method_timing_stats(method_name: String) -> Dictionary:\n\t\"\"\"Retorna estat√≠sticas de timing para um m√©todo espec√≠fico\"\"\"\n\tif not method_timings.has(method_name) or method_timings[method_name].is_empty():\n\t\treturn {\"calls\": 0, \"total\": 0, \"average\": 0, \"min\": 0, \"max\": 0}\n\t\n\tvar timings = method_timings[method_name]\n\tvar total = 0.0\n\tvar min_time = timings[0]\n\tvar max_time = timings[0]\n\t\n\tfor time in timings:\n\t\ttotal += time\n\t\tif time < min_time:\n\t\t\tmin_time = time\n\t\tif time > max_time:\n\t\t\tmax_time = time\n\t\n\treturn {\n\t\t\"calls\": timings.size(),\n\t\t\"total\": total,\n\t\t\"average\": total / timings.size(),\n\t\t\"min\": min_time,\n\t\t\"max\": max_time\n\t}\n\nfunc get_all_method_stats() -> Dictionary:\n\t\"\"\"Retorna estat√≠sticas de todos os m√©todos monitorados\"\"\"\n\tvar stats = {}\n\tfor method_name in method_timings.keys():\n\t\tstats[method_name] = get_method_timing_stats(method_name)\n\treturn stats\n\nfunc _check_performance_warnings(fps: float, memory: int, frame_time: float):\n\t\"\"\"Verifica e registra alertas de performance\"\"\"\n\tvar current_time = Time.get_ticks_msec()\n\t\n\t# Alerta de FPS baixo\n\tif fps < fps_warning_threshold:\n\t\t_add_warning(\"FPS baixo: %.1f\" % fps, current_time)\n\t\n\t# Alerta de mem√≥ria alta\n\tif memory > memory_warning_threshold:\n\t\t_add_warning(\"Mem√≥ria alta: %.1f MB\" % (memory / (1024.0 * 1024.0)), current_time)\n\t\n\t# Alerta de frame time alto\n\tif frame_time > frame_time_warning_threshold:\n\t\t_add_warning(\"Frame time alto: %.2f ms\" % frame_time, current_time)\n\nfunc _add_warning(message: String, timestamp: int):\n\t\"\"\"Adiciona um alerta de performance\"\"\"\n\tvar warning = {\n\t\t\"message\": message,\n\t\t\"timestamp\": timestamp,\n\t\t\"frame\": total_frames\n\t}\n\t\n\tperformance_warnings.append(warning)\n\t\n\t# Manter apenas os √∫ltimos 100 alertas\n\tif performance_warnings.size() > 100:\n\t\tperformance_warnings.pop_front()\n\t\n\tif enable_detailed_logging:\n\t\tprint(\"‚ö†Ô∏è Performance Warning: %s\" % message)\n\nfunc get_performance_warnings() -> Array:\n\t\"\"\"Retorna alertas de performance recentes\"\"\"\n\treturn performance_warnings.duplicate()\n\nfunc clear_warnings():\n\t\"\"\"Limpa todos os alertas de performance\"\"\"\n\tperformance_warnings.clear()\n\nfunc generate_performance_report() -> String:\n\t\"\"\"Gera um relat√≥rio completo de performance\"\"\"\n\tvar report = \"üìä RELAT√ìRIO DE PERFORMANCE\\n\"\n\treport += \"=\" * 50 + \"\\n\\n\"\n\t\n\t# Estat√≠sticas gerais\n\treport += \"üìà ESTAT√çSTICAS GERAIS:\\n\"\n\treport += \"Total de frames: %d\\n\" % total_frames\n\treport += \"Tempo de profiling: %.1f segundos\\n\" % (total_frames / 60.0)\n\treport += \"\\n\"\n\t\n\t# FPS\n\tvar fps_stats = get_fps_stats()\n\treport += \"üéÆ FPS:\\n\"\n\treport += \"  Atual: %.1f\\n\" % fps_stats.current\n\treport += \"  M√©dia: %.1f\\n\" % fps_stats.average\n\treport += \"  M√≠nimo: %.1f\\n\" % fps_stats.min\n\treport += \"  M√°ximo: %.1f\\n\" % fps_stats.max\n\treport += \"\\n\"\n\t\n\t# Mem√≥ria\n\tvar memory_stats = get_memory_stats()\n\treport += \"üß† MEM√ìRIA:\\n\"\n\treport += \"  Atual: %.1f MB\\n\" % memory_stats.current_mb\n\treport += \"  M√©dia: %.1f MB\\n\" % (memory_stats.average / (1024 * 1024))\n\treport += \"  Pico: %.1f MB\\n\" % memory_stats.peak_mb\n\treport += \"\\n\"\n\t\n\t# Frame Time\n\tvar frame_stats = get_frame_time_stats()\n\treport += \"‚è±Ô∏è FRAME TIME:\\n\"\n\treport += \"  Atual: %.2f ms\\n\" % frame_stats.current\n\treport += \"  M√©dia: %.2f ms\\n\" % frame_stats.average\n\treport += \"  Pior: %.2f ms\\n\" % frame_stats.worst\n\treport += \"\\n\"\n\t\n\t# M√©todos mais lentos\n\treport += \"üêå M√âTODOS MAIS LENTOS:\\n\"\n\tvar method_stats = get_all_method_stats()\n\tvar sorted_methods = []\n\t\n\tfor method_name in method_stats.keys():\n\t\tvar stats = method_stats[method_name]\n\t\tsorted_methods.append({\"name\": method_name, \"average\": stats.average})\n\t\n\tsorted_methods.sort_custom(func(a, b): return a.average > b.average)\n\t\n\tfor i in range(min(5, sorted_methods.size())):\n\t\tvar method = sorted_methods[i]\n\t\tvar stats = method_stats[method.name]\n\t\treport += \"  %s: %.2f ms (avg), %d calls\\n\" % [method.name, stats.average, stats.calls]\n\t\n\treport += \"\\n\"\n\t\n\t# Alertas recentes\n\tif performance_warnings.size() > 0:\n\t\treport += \"‚ö†Ô∏è ALERTAS RECENTES:\\n\"\n\t\tvar recent_warnings = performance_warnings.slice(-10)  # √öltimos 10\n\t\tfor warning in recent_warnings:\n\t\t\treport += \"  Frame %d: %s\\n\" % [warning.frame, warning.message]\n\t\treport += \"\\n\"\n\t\n\treport += \"=\" * 50 + \"\\n\"\n\treport += \"Relat√≥rio gerado em: %s\\n\" % Time.get_datetime_string_from_system()\n\t\n\treturn report\n\nfunc reset_stats():\n\t\"\"\"Reseta todas as estat√≠sticas\"\"\"\n\tfps_history.clear()\n\tmemory_history.clear()\n\tframe_times.clear()\n\tmethod_timings.clear()\n\tactive_timers.clear()\n\tperformance_warnings.clear()\n\t\n\ttotal_frames = 0\n\tpeak_memory = 0\n\tworst_frame_time = 0.0\n\t\n\tprint(\"üîÑ Estat√≠sticas de performance resetadas\")\n\nfunc cleanup():\n\t\"\"\"Limpa recursos do profiler\"\"\"\n\tstop_profiling()\n\treset_stats()\n\tinstance = null\n"