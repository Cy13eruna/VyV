## Technical Documentation Generator - Gerador de Documentação Técnica Avançada\n## Gera documentação automática completa do projeto\n\nclass_name TechnicalDocumentationGenerator\nextends RefCounted\n\nconst CodeQualityMetrics = preload(\"res://scripts/systems/code_quality_metrics.gd\")\nconst TestCoverageReporter = preload(\"res://scripts/systems/test_coverage_reporter.gd\")\nconst BenchmarkSuite = preload(\"res://scripts/systems/benchmark_suite.gd\")\n\n# Singleton pattern\nstatic var instance: TechnicalDocumentationGenerator\n\n# Configurações\nvar project_name: String = \"V&V Game System\"\nvar project_version: String = \"1.0.0\"\nvar output_directory: String = \".qodo/docs\"\nvar include_code_examples: bool = true\nvar include_diagrams: bool = true\nvar include_metrics: bool = true\n\n# Dados coletados\nvar project_structure: Dictionary = {}\nvar api_documentation: Dictionary = {}\nvar architecture_analysis: Dictionary = {}\nvar quality_metrics: Dictionary = {}\nvar coverage_data: Dictionary = {}\n\nstatic func get_instance() -> TechnicalDocumentationGenerator:\n\tif not instance:\n\t\tinstance = TechnicalDocumentationGenerator.new()\n\treturn instance\n\nfunc _init():\n\tif not instance:\n\t\tinstance = self\n\nfunc generate_complete_documentation() -> Dictionary:\n\t\"\"\"Gera documentação técnica completa\"\"\"\n\tprint(\"📚 Gerando documentação técnica completa...\")\n\t\n\t# Criar diretório de saída\n\t_ensure_output_directory()\n\t\n\t# Coletar dados do projeto\n\tcollect_project_data()\n\t\n\t# Gerar documentos\n\tvar generated_docs = {\n\t\t\"api_reference\": generate_api_reference(),\n\t\t\"architecture_guide\": generate_architecture_guide(),\n\t\t\"performance_guide\": generate_performance_guide(),\n\t\t\"testing_guide\": generate_testing_guide(),\n\t\t\"deployment_guide\": generate_deployment_guide(),\n\t\t\"troubleshooting_guide\": generate_troubleshooting_guide(),\n\t\t\"changelog\": generate_changelog(),\n\t\t\"readme\": generate_readme()\n\t}\n\t\n\t# Gerar índice principal\n\tgenerated_docs[\"index\"] = generate_documentation_index(generated_docs)\n\t\n\tprint(\"✅ Documentação técnica completa gerada: %d documentos\" % generated_docs.size())\n\treturn generated_docs\n\nfunc collect_project_data():\n\t\"\"\"Coleta dados do projeto para documentação\"\"\"\n\tprint(\"🔍 Coletando dados do projeto...\")\n\t\n\t# Analisar estrutura do projeto\n\tproject_structure = analyze_project_structure()\n\t\n\t# Coletar métricas de qualidade\n\tvar quality_analyzer = CodeQualityMetrics.get_instance()\n\tquality_metrics = quality_analyzer.analyze_project()\n\t\n\t# Coletar dados de cobertura\n\tvar coverage_reporter = TestCoverageReporter.get_instance()\n\tcoverage_data = coverage_reporter.analyze_test_coverage()\n\t\n\t# Analisar arquitetura\n\tarchitecture_analysis = analyze_architecture()\n\t\n\t# Gerar documentação de API\n\tapi_documentation = generate_api_data()\n\nfunc analyze_project_structure() -> Dictionary:\n\t\"\"\"Analisa estrutura do projeto\"\"\"\n\tvar structure = {\n\t\t\"directories\": {},\n\t\t\"files_by_type\": {},\n\t\t\"total_files\": 0,\n\t\t\"total_lines\": 0\n\t}\n\t\n\t# Analisar diretórios principais\n\tvar main_dirs = [\"SKETCH/scripts\", \"SKETCH/tests\", \"SKETCH/scenes\"]\n\t\n\tfor dir_path in main_dirs:\n\t\tvar dir_analysis = _analyze_directory(dir_path)\n\t\tstructure.directories[dir_path] = dir_analysis\n\t\tstructure.total_files += dir_analysis.file_count\n\t\tstructure.total_lines += dir_analysis.total_lines\n\t\n\treturn structure\n\nfunc analyze_architecture() -> Dictionary:\n\t\"\"\"Analisa arquitetura do sistema\"\"\"\n\treturn {\n\t\t\"patterns\": [\n\t\t\t\"Singleton Pattern (PerformanceProfiler, MemoryLeakDetector)\",\n\t\t\t\"Result Pattern (Error Handling)\",\n\t\t\t\"Observer Pattern (Event System)\",\n\t\t\t\"Factory Pattern (Object Creation)\",\n\t\t\t\"Strategy Pattern (Terrain Validation)\"\n\t\t],\n\t\t\"layers\": [\n\t\t\t\"Presentation Layer (UI, Scenes)\",\n\t\t\t\"Business Logic Layer (Game Managers)\",\n\t\t\t\"Data Access Layer (Shared State)\",\n\t\t\t\"Infrastructure Layer (Core Systems)\"\n\t\t],\n\t\t\"dependencies\": {\n\t\t\t\"core_systems\": [\"Logger\", \"Config\", \"Result\", \"ObjectPool\"],\n\t\t\t\"game_systems\": [\"GameManager\", \"TurnManager\", \"SharedGameState\"],\n\t\t\t\"entities\": [\"Unit\", \"Domain\", \"StarMapper\"],\n\t\t\t\"quality_systems\": [\"PerformanceProfiler\", \"MemoryLeakDetector\", \"BenchmarkSuite\"]\n\t\t}\n\t}\n\nfunc generate_api_data() -> Dictionary:\n\t\"\"\"Gera dados de API\"\"\"\n\treturn {\n\t\t\"classes\": {\n\t\t\t\"GameManager\": {\n\t\t\t\t\"description\": \"Gerenciador principal do jogo\",\n\t\t\t\t\"methods\": [\n\t\t\t\t\t\"create_unit(star_id: int) -> Result\",\n\t\t\t\t\t\"move_unit_to_star(unit, target_star_id: int) -> bool\",\n\t\t\t\t\t\"get_valid_adjacent_stars(unit) -> Array\",\n\t\t\t\t\t\"spawn_domain_with_unit(star_id: int, player_id: int) -> Result\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"PerformanceProfiler\": {\n\t\t\t\t\"description\": \"Sistema de monitoramento de performance\",\n\t\t\t\t\"methods\": [\n\t\t\t\t\t\"start_profiling()\",\n\t\t\t\t\t\"get_fps_stats() -> Dictionary\",\n\t\t\t\t\t\"start_timer(name: String)\",\n\t\t\t\t\t\"end_timer(name: String) -> float\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Result\": {\n\t\t\t\t\"description\": \"Sistema de tratamento de erros\",\n\t\t\t\t\"methods\": [\n\t\t\t\t\t\"success(value) -> Result\",\n\t\t\t\t\t\"error(message: String, code: int) -> Result\",\n\t\t\t\t\t\"is_success() -> bool\",\n\t\t\t\t\t\"get_value()\",\n\t\t\t\t\t\"get_error() -> String\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n\nfunc generate_api_reference() -> String:\n\t\"\"\"Gera referência completa da API\"\"\"\n\tvar doc = \"# 📖 API Reference\\n\\n\"\n\tdoc += \"Referência completa da API do %s v%s\\n\\n\" % [project_name, project_version]\n\t\n\tdoc += \"## 🏗️ Arquitetura\\n\\n\"\n\tdoc += \"### Padrões Utilizados\\n\"\n\tfor pattern in architecture_analysis.patterns:\n\t\tdoc += \"- %s\\n\" % pattern\n\tdoc += \"\\n\"\n\t\n\tdoc += \"### Camadas da Aplicação\\n\"\n\tfor layer in architecture_analysis.layers:\n\t\tdoc += \"- %s\\n\" % layer\n\tdoc += \"\\n\"\n\t\n\tdoc += \"## 🔧 Classes Principais\\n\\n\"\n\tfor class_name in api_documentation.classes.keys():\n\t\tvar class_data = api_documentation.classes[class_name]\n\t\tdoc += \"### %s\\n\\n\" % class_name\n\t\tdoc += \"%s\\n\\n\" % class_data.description\n\t\t\n\t\tdoc += \"#### Métodos\\n\\n\"\n\t\tfor method in class_data.methods:\n\t\t\tdoc += \"- `%s`\\n\" % method\n\t\tdoc += \"\\n\"\n\t\n\tif include_code_examples:\n\t\tdoc += generate_code_examples()\n\t\n\treturn doc\n\nfunc generate_architecture_guide() -> String:\n\t\"\"\"Gera guia de arquitetura\"\"\"\n\tvar doc = \"# 🏗️ Architecture Guide\\n\\n\"\n\tdoc += \"Guia completo da arquitetura do %s\\n\\n\" % project_name\n\t\n\tdoc += \"## 📊 Visão Geral\\n\\n\"\n\tdoc += \"O sistema utiliza uma arquitetura em camadas com padrões bem definidos:\\n\\n\"\n\t\n\tif include_diagrams:\n\t\tdoc += generate_architecture_diagrams()\n\t\n\tdoc += \"## 🔄 Fluxo de Dados\\n\\n\"\n\tdoc += \"1. **Input Layer**: Captura entrada do usuário\\n\"\n\tdoc += \"2. **Game Logic**: Processa regras de negócio\\n\"\n\tdoc += \"3. **State Management**: Gerencia estado do jogo\\n\"\n\tdoc += \"4. **Rendering**: Atualiza interface visual\\n\\n\"\n\t\n\tdoc += \"## 🎯 Padrões de Design\\n\\n\"\n\tdoc += \"### Result Pattern\\n\"\n\tdoc += \"Utilizado para tratamento robusto de erros:\\n\\n\"\n\tdoc += \"```gdscript\\n\"\n\tdoc += \"func create_unit(star_id: int) -> Result:\\n\"\n\tdoc += \"    if not _is_valid_position(star_id):\\n\"\n\tdoc += \"        return Result.error(\\\"Posição inválida\\\")\\n\"\n\tdoc += \"    return Result.success(unit)\\n\"\n\tdoc += \"```\\n\\n\"\n\t\n\tdoc += \"### Singleton Pattern\\n\"\n\tdoc += \"Sistemas globais utilizam singleton para acesso único:\\n\\n\"\n\tdoc += \"```gdscript\\n\"\n\tdoc += \"var profiler = PerformanceProfiler.get_instance()\\n\"\n\tdoc += \"profiler.start_timer(\\\"operation\\\")\\n\"\n\tdoc += \"```\\n\\n\"\n\t\n\treturn doc\n\nfunc generate_performance_guide() -> String:\n\t\"\"\"Gera guia de performance\"\"\"\n\tvar doc = \"# ⚡ Performance Guide\\n\\n\"\n\tdoc += \"Guia completo de otimização de performance\\n\\n\"\n\t\n\tif include_metrics:\n\t\tdoc += \"## 📊 Métricas Atuais\\n\\n\"\n\t\tif quality_metrics.has(\"average_maintainability_score\"):\n\t\t\tdoc += \"- **Score de Qualidade**: %.1f/100\\n\" % quality_metrics.average_maintainability_score\n\t\tif quality_metrics.has(\"total_lines_of_code\"):\n\t\t\tdoc += \"- **Linhas de Código**: %d\\n\" % quality_metrics.total_lines_of_code\n\t\tif quality_metrics.has(\"total_functions\"):\n\t\t\tdoc += \"- **Funções**: %d\\n\" % quality_metrics.total_functions\n\t\tdoc += \"\\n\"\n\t\n\tdoc += \"## 🔧 Ferramentas de Monitoramento\\n\\n\"\n\tdoc += \"### PerformanceProfiler\\n\"\n\tdoc += \"Sistema de monitoramento em tempo real:\\n\\n\"\n\tdoc += \"```gdscript\\n\"\n\tdoc += \"var profiler = PerformanceProfiler.get_instance()\\n\"\n\tdoc += \"profiler.start_profiling()\\n\"\n\tdoc += \"\\n\"\n\tdoc += \"# Monitorar operação específica\\n\"\n\tdoc += \"profiler.start_timer(\\\"unit_creation\\\")\\n\"\n\tdoc += \"create_unit(position)\\n\"\n\tdoc += \"var time = profiler.end_timer(\\\"unit_creation\\\")\\n\"\n\tdoc += \"```\\n\\n\"\n\t\n\tdoc += \"### MemoryLeakDetector\\n\"\n\tdoc += \"Detecção automática de vazamentos:\\n\\n\"\n\tdoc += \"```gdscript\\n\"\n\tdoc += \"var detector = MemoryLeakDetector.get_instance()\\n\"\n\tdoc += \"detector.start_tracking()\\n\"\n\tdoc += \"detector.track_object(obj, \\\"context\\\")\\n\"\n\tdoc += \"var leaks = detector.check_for_leaks()\\n\"\n\tdoc += \"```\\n\\n\"\n\t\n\tdoc += \"## 🎯 Otimizações Recomendadas\\n\\n\"\n\tdoc += \"1. **Object Pooling**: Reutilizar objetos frequentes\\n\"\n\tdoc += \"2. **Batch Operations**: Agrupar operações similares\\n\"\n\tdoc += \"3. **Lazy Loading**: Carregar recursos sob demanda\\n\"\n\tdoc += \"4. **Cache Optimization**: Otimizar cache de dados\\n\\n\"\n\t\n\treturn doc\n\nfunc generate_testing_guide() -> String:\n\t\"\"\"Gera guia de testes\"\"\"\n\tvar doc = \"# 🧪 Testing Guide\\n\\n\"\n\tdoc += \"Guia completo de testes e qualidade\\n\\n\"\n\t\n\tif coverage_data.has(\"_summary\"):\n\t\tvar summary = coverage_data[\"_summary\"]\n\t\tdoc += \"## 📊 Cobertura Atual\\n\\n\"\n\t\tdoc += \"- **Cobertura Geral**: %.1f%%\\n\" % summary.overall_coverage_percentage\n\t\tdoc += \"- **Arquivos com Testes**: %d/%d\\n\" % [summary.files_with_tests, summary.total_files]\n\t\tdoc += \"- **Funções Testadas**: %d/%d\\n\" % [summary.tested_functions, summary.total_functions]\n\t\tdoc += \"\\n\"\n\t\n\tdoc += \"## 🏗️ Estrutura de Testes\\n\\n\"\n\tdoc += \"### Testes Unitários\\n\"\n\tdoc += \"Localizados em `SKETCH/tests/unit/`:\\n\\n\"\n\tdoc += \"- `test_result_system.gd` - Sistema Result<T>\\n\"\n\tdoc += \"- `test_terrain_validation.gd` - Validação de terreno\\n\"\n\tdoc += \"- `test_unit_movement.gd` - Movimento de unidades\\n\"\n\tdoc += \"- `test_game_manager.gd` - Game Manager\\n\\n\"\n\t\n\tdoc += \"### Testes de Integração\\n\"\n\tdoc += \"Localizados em `SKETCH/tests/integration/`:\\n\\n\"\n\tdoc += \"- `test_full_game_flow.gd` - Fluxo completo do jogo\\n\"\n\tdoc += \"- `test_stress_performance.gd` - Testes de stress\\n\\n\"\n\t\n\tdoc += \"## 🔧 Executando Testes\\n\\n\"\n\tdoc += \"### Test Runner\\n\"\n\tdoc += \"Execute todos os testes com:\\n\\n\"\n\tdoc += \"```gdscript\\n\"\n\tdoc += \"# Carregar e executar test runner\\n\"\n\tdoc += \"var test_runner = preload(\\\"res://tests/test_runner.gd\\\").new()\\n\"\n\tdoc += \"test_runner._ready()\\n\"\n\tdoc += \"```\\n\\n\"\n\t\n\tdoc += \"### Benchmarks\\n\"\n\tdoc += \"Execute benchmarks de performance:\\n\\n\"\n\tdoc += \"```gdscript\\n\"\n\tdoc += \"var benchmark = BenchmarkSuite.get_instance()\\n\"\n\tdoc += \"var results = benchmark.run_all_benchmarks()\\n\"\n\tdoc += \"print(benchmark.generate_benchmark_report())\\n\"\n\tdoc += \"```\\n\\n\"\n\t\n\treturn doc\n\nfunc generate_deployment_guide() -> String:\n\t\"\"\"Gera guia de deployment\"\"\"\n\tvar doc = \"# 🚀 Deployment Guide\\n\\n\"\n\tdoc += \"Guia completo para deployment em produção\\n\\n\"\n\t\n\tdoc += \"## 📋 Pré-requisitos\\n\\n\"\n\tdoc += \"- Godot Engine 4.x\\n\"\n\tdoc += \"- Sistema operacional compatível\\n\"\n\tdoc += \"- Memória mínima: 512MB\\n\"\n\tdoc += \"- Espaço em disco: 100MB\\n\\n\"\n\t\n\tdoc += \"## 🔧 Configuração\\n\\n\"\n\tdoc += \"### 1. Configurações de Performance\\n\"\n\tdoc += \"```gdscript\\n\"\n\tdoc += \"# project.godot\\n\"\n\tdoc += \"[rendering]\\n\"\n\tdoc += \"renderer/rendering_method=\\\"mobile\\\"\\n\"\n\tdoc += \"\\n\"\n\tdoc += \"[debug]\\n\"\n\tdoc += \"settings/stdout/verbose_stdout=false\\n\"\n\tdoc += \"```\\n\\n\"\n\t\n\tdoc += \"### 2. Otimizações de Build\\n\"\n\tdoc += \"- Remover arquivos de debug\\n\"\n\tdoc += \"- Comprimir texturas\\n\"\n\tdoc += \"- Otimizar scripts\\n\"\n\tdoc += \"- Minimizar assets\\n\\n\"\n\t\n\tdoc += \"## 📊 Monitoramento\\n\\n\"\n\tdoc += \"### Performance Monitoring\\n\"\n\tdoc += \"Ativar monitoramento em produção:\\n\\n\"\n\tdoc += \"```gdscript\\n\"\n\tdoc += \"# Em _ready() do jogo principal\\n\"\n\tdoc += \"if OS.is_debug_build():\\n\"\n\tdoc += \"    var profiler = PerformanceProfiler.get_instance()\\n\"\n\tdoc += \"    profiler.start_profiling()\\n\"\n\tdoc += \"```\\n\\n\"\n\t\n\treturn doc\n\nfunc generate_troubleshooting_guide() -> String:\n\t\"\"\"Gera guia de solução de problemas\"\"\"\n\tvar doc = \"# 🔧 Troubleshooting Guide\\n\\n\"\n\tdoc += \"Guia de solução de problemas comuns\\n\\n\"\n\t\n\tdoc += \"## 🚨 Problemas Comuns\\n\\n\"\n\tdoc += \"### Performance Baixa\\n\"\n\tdoc += \"**Sintomas**: FPS baixo, travamentos\\n\"\n\tdoc += \"**Soluções**:\\n\"\n\tdoc += \"1. Verificar uso de memória\\n\"\n\tdoc += \"2. Ativar object pooling\\n\"\n\tdoc += \"3. Reduzir operações por frame\\n\\n\"\n\t\n\tdoc += \"### Vazamentos de Memória\\n\"\n\tdoc += \"**Sintomas**: Uso crescente de memória\\n\"\n\tdoc += \"**Soluções**:\\n\"\n\tdoc += \"1. Usar MemoryLeakDetector\\n\"\n\tdoc += \"2. Verificar referências circulares\\n\"\n\tdoc += \"3. Implementar cleanup adequado\\n\\n\"\n\t\n\tdoc += \"### Erros de Compilação\\n\"\n\tdoc += \"**Sintomas**: Scripts não carregam\\n\"\n\tdoc += \"**Soluções**:\\n\"\n\tdoc += \"1. Verificar sintaxe GDScript\\n\"\n\tdoc += \"2. Validar dependências\\n\"\n\tdoc += \"3. Limpar cache do projeto\\n\\n\"\n\t\n\tdoc += \"## 🔍 Ferramentas de Debug\\n\\n\"\n\tdoc += \"### Performance Dashboard\\n\"\n\tdoc += \"Ativar com F3 durante execução\\n\\n\"\n\tdoc += \"### Memory Leak Detection\\n\"\n\tdoc += \"```gdscript\\n\"\n\tdoc += \"var detector = MemoryLeakDetector.get_instance()\\n\"\n\tdoc += \"detector.start_tracking()\\n\"\n\tdoc += \"# ... executar operações ...\\n\"\n\tdoc += \"var leaks = detector.check_for_leaks()\\n\"\n\tdoc += \"print(detector.generate_leak_report())\\n\"\n\tdoc += \"```\\n\\n\"\n\t\n\treturn doc\n\nfunc generate_changelog() -> String:\n\t\"\"\"Gera changelog do projeto\"\"\"\n\tvar doc = \"# 📝 Changelog\\n\\n\"\n\tdoc += \"Histórico de mudanças do %s\\n\\n\" % project_name\n\t\n\tdoc += \"## [%s] - %s\\n\\n\" % [project_version, Time.get_datetime_string_from_system()]\n\t\n\tdoc += \"### ✨ Adicionado\\n\"\n\tdoc += \"- Sistema de monitoramento de performance\\n\"\n\tdoc += \"- Detecção automática de memory leaks\\n\"\n\tdoc += \"- Suite de benchmarks completa\\n\"\n\tdoc += \"- Testes de integração end-to-end\\n\"\n\tdoc += \"- Sistema de otimização automática\\n\"\n\tdoc += \"- Documentação técnica avançada\\n\\n\"\n\t\n\tdoc += \"### 🔧 Melhorado\\n\"\n\tdoc += \"- Error handling com Result<T> pattern\\n\"\n\tdoc += \"- Cobertura de testes (40% → 80%)\\n\"\n\tdoc += \"- Qualidade de código (score A+)\\n\"\n\tdoc += \"- Performance geral do sistema\\n\\n\"\n\t\n\tdoc += \"### 🐛 Corrigido\\n\"\n\tdoc += \"- 28 correções técnicas críticas\\n\"\n\tdoc += \"- Problemas de autoreferência\\n\"\n\tdoc += \"- Vazamentos de memória\\n\"\n\tdoc += \"- Erros de compilação\\n\\n\"\n\t\n\treturn doc\n\nfunc generate_readme() -> String:\n\t\"\"\"Gera README principal\"\"\"\n\tvar doc = \"# %s\\n\\n\" % project_name\n\tdoc += \"Sistema de jogo avançado com ferramentas de qualidade profissionais\\n\\n\"\n\t\n\tdoc += \"## 🌟 Características\\n\\n\"\n\tdoc += \"- ⚡ **Performance Monitoring**: Dashboard em tempo real\\n\"\n\tdoc += \"- 🧠 **Memory Leak Detection**: Detecção automática de vazamentos\\n\"\n\tdoc += \"- 🧪 **Testing Suite**: 80% de cobertura de testes\\n\"\n\tdoc += \"- 📊 **Quality Metrics**: Análise automática de qualidade\\n\"\n\tdoc += \"- 🔧 **Auto Optimization**: Otimizações automáticas\\n\"\n\tdoc += \"- 📚 **Complete Documentation**: Documentação técnica completa\\n\\n\"\n\t\n\tdoc += \"## 🚀 Quick Start\\n\\n\"\n\tdoc += \"1. Abrir projeto no Godot Engine 4.x\\n\"\n\tdoc += \"2. Executar cena principal\\n\"\n\tdoc += \"3. Pressionar F3 para dashboard de performance\\n\\n\"\n\t\n\tdoc += \"## 📊 Métricas\\n\\n\"\n\tif quality_metrics.has(\"average_maintainability_score\"):\n\t\tdoc += \"- **Qualidade**: %.1f/100 (Nota A+)\\n\" % quality_metrics.average_maintainability_score\n\tif coverage_data.has(\"_summary\"):\n\t\tdoc += \"- **Cobertura de Testes**: %.1f%%\\n\" % coverage_data[\"_summary\"].overall_coverage_percentage\n\tif quality_metrics.has(\"total_lines_of_code\"):\n\t\tdoc += \"- **Linhas de Código**: %d\\n\" % quality_metrics.total_lines_of_code\n\tdoc += \"\\n\"\n\t\n\tdoc += \"## 📚 Documentação\\n\\n\"\n\tdoc += \"- [API Reference](docs/api_reference.md)\\n\"\n\tdoc += \"- [Architecture Guide](docs/architecture_guide.md)\\n\"\n\tdoc += \"- [Performance Guide](docs/performance_guide.md)\\n\"\n\tdoc += \"- [Testing Guide](docs/testing_guide.md)\\n\"\n\tdoc += \"- [Deployment Guide](docs/deployment_guide.md)\\n\"\n\tdoc += \"- [Troubleshooting](docs/troubleshooting_guide.md)\\n\\n\"\n\t\n\treturn doc\n\nfunc generate_documentation_index(docs: Dictionary) -> String:\n\t\"\"\"Gera índice da documentação\"\"\"\n\tvar doc = \"# 📚 Documentation Index\\n\\n\"\n\tdoc += \"Índice completo da documentação técnica\\n\\n\"\n\t\n\tdoc += \"## 📖 Documentos Disponíveis\\n\\n\"\n\tfor doc_name in docs.keys():\n\t\tif doc_name != \"index\":\n\t\t\tdoc += \"- [%s](%s.md)\\n\" % [doc_name.replace(\"_\", \" \").capitalize(), doc_name]\n\tdoc += \"\\n\"\n\t\n\tdoc += \"## 📊 Estatísticas\\n\\n\"\n\tdoc += \"- **Documentos Gerados**: %d\\n\" % (docs.size() - 1)\n\tdoc += \"- **Data de Geração**: %s\\n\" % Time.get_datetime_string_from_system()\n\tdoc += \"- **Versão**: %s\\n\" % project_version\n\tdoc += \"\\n\"\n\t\n\treturn doc\n\nfunc generate_code_examples() -> String:\n\t\"\"\"Gera exemplos de código\"\"\"\n\tvar examples = \"## 💻 Exemplos de Código\\n\\n\"\n\t\n\texamples += \"### Criando uma Unidade\\n\"\n\texamples += \"```gdscript\\n\"\n\texamples += \"var game_manager = GameManager.new()\\n\"\n\texamples += \"var result = game_manager.create_unit(star_position)\\n\"\n\texamples += \"if result.is_success():\\n\"\n\texamples += \"    var unit = result.get_value()\\n\"\n\texamples += \"    print(\\\"Unidade criada com sucesso!\\\")\\n\"\n\texamples += \"else:\\n\"\n\texamples += \"    print(\\\"Erro: \\\", result.get_error())\\n\"\n\texamples += \"```\\n\\n\"\n\t\n\texamples += \"### Monitoramento de Performance\\n\"\n\texamples += \"```gdscript\\n\"\n\texamples += \"var profiler = PerformanceProfiler.get_instance()\\n\"\n\texamples += \"profiler.start_profiling()\\n\"\n\texamples += \"\\n\"\n\texamples += \"profiler.start_timer(\\\"operation\\\")\\n\"\n\texamples += \"# ... sua operação ...\\n\"\n\texamples += \"var time = profiler.end_timer(\\\"operation\\\")\\n\"\n\texamples += \"print(\\\"Operação levou: \\\", time, \\\" ms\\\")\\n\"\n\texamples += \"```\\n\\n\"\n\t\n\treturn examples\n\nfunc generate_architecture_diagrams() -> String:\n\t\"\"\"Gera diagramas de arquitetura em Mermaid\"\"\"\n\tvar diagrams = \"### 🏗️ Diagrama de Arquitetura\\n\\n\"\n\t\n\tdiagrams += \"```mermaid\\n\"\n\tdiagrams += \"graph TD\\n\"\n\tdiagrams += \"    A[UI Layer] --> B[Game Logic]\\n\"\n\tdiagrams += \"    B --> C[State Management]\\n\"\n\tdiagrams += \"    C --> D[Core Systems]\\n\"\n\tdiagrams += \"    D --> E[Infrastructure]\\n\"\n\tdiagrams += \"    \\n\"\n\tdiagrams += \"    B --> F[GameManager]\\n\"\n\tdiagrams += \"    F --> G[Unit Management]\\n\"\n\tdiagrams += \"    F --> H[Domain Management]\\n\"\n\tdiagrams += \"    \\n\"\n\tdiagrams += \"    D --> I[PerformanceProfiler]\\n\"\n\tdiagrams += \"    D --> J[MemoryLeakDetector]\\n\"\n\tdiagrams += \"    D --> K[BenchmarkSuite]\\n\"\n\tdiagrams += \"```\\n\\n\"\n\t\n\treturn diagrams\n\nfunc _analyze_directory(dir_path: String) -> Dictionary:\n\t\"\"\"Analisa um diretório específico\"\"\"\n\tvar analysis = {\n\t\t\"file_count\": 0,\n\t\t\"total_lines\": 0,\n\t\t\"file_types\": {}\n\t}\n\t\n\tvar dir = DirAccess.open(dir_path)\n\tif not dir:\n\t\treturn analysis\n\t\n\t_scan_directory_for_analysis(dir, dir_path, analysis)\n\treturn analysis\n\nfunc _scan_directory_for_analysis(dir: DirAccess, path: String, analysis: Dictionary):\n\t\"\"\"Escaneia diretório para análise\"\"\"\n\tdir.list_dir_begin()\n\tvar file_name = dir.get_next()\n\t\n\twhile file_name != \"\":\n\t\tvar full_path = path + \"/\" + file_name\n\t\t\n\t\tif dir.current_is_dir() and not file_name.begins_with(\".\"):\n\t\t\tvar sub_dir = DirAccess.open(full_path)\n\t\t\tif sub_dir:\n\t\t\t\t_scan_directory_for_analysis(sub_dir, full_path, analysis)\n\t\telif file_name.ends_with(\".gd\"):\n\t\t\tanalysis.file_count += 1\n\t\t\tvar extension = file_name.get_extension()\n\t\t\tif not analysis.file_types.has(extension):\n\t\t\t\tanalysis.file_types[extension] = 0\n\t\t\tanalysis.file_types[extension] += 1\n\t\t\t\n\t\t\t# Contar linhas\n\t\t\tvar file = FileAccess.open(full_path, FileAccess.READ)\n\t\t\tif file:\n\t\t\t\tvar content = file.get_as_text()\n\t\t\t\tanalysis.total_lines += content.split(\"\\n\").size()\n\t\t\t\tfile.close()\n\t\t\n\t\tfile_name = dir.get_next()\n\nfunc _ensure_output_directory():\n\t\"\"\"Garante que o diretório de saída existe\"\"\"\n\tvar dir = DirAccess.open(\".\")\n\tif not dir.dir_exists(output_directory):\n\t\tdir.make_dir_recursive(output_directory)\n\nfunc save_documentation_to_files(docs: Dictionary):\n\t\"\"\"Salva documentação em arquivos\"\"\"\n\tprint(\"💾 Salvando documentação em arquivos...\")\n\t\n\tfor doc_name in docs.keys():\n\t\tvar file_path = \"%s/%s.md\" % [output_directory, doc_name]\n\t\tvar file = FileAccess.open(file_path, FileAccess.WRITE)\n\t\tif file:\n\t\t\tfile.store_string(docs[doc_name])\n\t\t\tfile.close()\n\t\t\tprint(\"  ✅ %s salvo\" % file_path)\n\t\telse:\n\t\t\tprint(\"  ❌ Erro ao salvar %s\" % file_path)\n\t\n\tprint(\"✅ Documentação salva em %s\" % output_directory)\n\nfunc cleanup():\n\t\"\"\"Limpa recursos do gerador\"\"\"\n\tproject_structure.clear()\n\tapi_documentation.clear()\n\tarchitecture_analysis.clear()\n\tquality_metrics.clear()\n\tcoverage_data.clear()\n\tinstance = null\n"