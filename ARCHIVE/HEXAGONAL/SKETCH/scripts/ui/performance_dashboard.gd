## Performance Dashboard - Interface Visual de Monitoramento\n## Dashboard em tempo real para m√©tricas de performance\n\nclass_name PerformanceDashboard\nextends Control\n\nconst PerformanceProfiler = preload(\"res://scripts/systems/performance_profiler.gd\")\n\n# Componentes UI\n@onready var fps_label: Label\n@onready var memory_label: Label\n@onready var frame_time_label: Label\n@onready var warnings_label: Label\n@onready var fps_graph: Control\n@onready var memory_graph: Control\n@onready var method_list: ItemList\n\n# Configura√ß√µes do dashboard\nvar update_interval: float = 0.1  # Atualizar a cada 100ms\nvar graph_width: int = 200\nvar graph_height: int = 60\nvar show_detailed_info: bool = false\n\n# Estado interno\nvar profiler: PerformanceProfiler\nvar update_timer: float = 0.0\nvar is_visible_dashboard: bool = false\n\n# Cores para gr√°ficos\nvar fps_color: Color = Color.GREEN\nvar memory_color: Color = Color.BLUE\nvar warning_color: Color = Color.RED\nvar background_color: Color = Color(0, 0, 0, 0.7)\n\nfunc _ready():\n\t# Configurar dashboard\n\tprofiler = PerformanceProfiler.get_instance()\n\tsetup_ui()\n\tset_visible(false)\n\t\n\t# Conectar input para toggle\n\tset_process_input(true)\n\nfunc _input(event):\n\t# Toggle dashboard com F3\n\tif event is InputEventKey and event.pressed:\n\t\tif event.keycode == KEY_F3:\n\t\t\ttoggle_dashboard()\n\t\telif event.keycode == KEY_F4 and is_visible_dashboard:\n\t\t\ttoggle_detailed_info()\n\nfunc _process(delta):\n\tif not is_visible_dashboard:\n\t\treturn\n\t\n\tupdate_timer += delta\n\tif update_timer >= update_interval:\n\t\tupdate_dashboard()\n\t\tupdate_timer = 0.0\n\nfunc setup_ui():\n\t\"\"\"Configura a interface do dashboard\"\"\"\n\t# Configurar layout principal\n\tset_anchors_and_offsets_preset(Control.PRESET_TOP_LEFT)\n\tsize = Vector2(300, 400)\n\tposition = Vector2(10, 10)\n\t\n\t# Background\n\tvar background = ColorRect.new()\n\tbackground.color = background_color\n\tbackground.set_anchors_and_offsets_preset(Control.PRESET_FULL_RECT)\n\tadd_child(background)\n\t\n\t# Container principal\n\tvar vbox = VBoxContainer.new()\n\tvbox.set_anchors_and_offsets_preset(Control.PRESET_FULL_RECT)\n\tvbox.add_theme_constant_override(\"separation\", 5)\n\tadd_child(vbox)\n\t\n\t# T√≠tulo\n\tvar title = Label.new()\n\ttitle.text = \"üìä Performance Dashboard\"\n\ttitle.add_theme_font_size_override(\"font_size\", 16)\n\tvbox.add_child(title)\n\t\n\t# Separador\n\tvar separator1 = HSeparator.new()\n\tvbox.add_child(separator1)\n\t\n\t# Labels de m√©tricas\n\tfps_label = Label.new()\n\tfps_label.text = \"FPS: --\"\n\tvbox.add_child(fps_label)\n\t\n\tmemory_label = Label.new()\n\tmemory_label.text = \"Memory: --\"\n\tvbox.add_child(memory_label)\n\t\n\tframe_time_label = Label.new()\n\tframe_time_label.text = \"Frame Time: --\"\n\tvbox.add_child(frame_time_label)\n\t\n\t# Gr√°ficos\n\tsetup_graphs(vbox)\n\t\n\t# Separador\n\tvar separator2 = HSeparator.new()\n\tvbox.add_child(separator2)\n\t\n\t# Alertas\n\tvar warnings_title = Label.new()\n\twarnings_title.text = \"‚ö†Ô∏è Alertas:\"\n\tvbox.add_child(warnings_title)\n\t\n\twarnings_label = Label.new()\n\twarnings_label.text = \"Nenhum alerta\"\n\twarnings_label.autowrap_mode = TextServer.AUTOWRAP_WORD_SMART\n\tvbox.add_child(warnings_label)\n\t\n\t# Lista de m√©todos (detalhada)\n\tif show_detailed_info:\n\t\tsetup_detailed_info(vbox)\n\t\n\t# Instru√ß√µes\n\tvar instructions = Label.new()\n\tinstructions.text = \"F3: Toggle | F4: Detalhes\"\n\tinstructions.add_theme_font_size_override(\"font_size\", 10)\n\tvbox.add_child(instructions)\n\nfunc setup_graphs(parent: VBoxContainer):\n\t\"\"\"Configura os gr√°ficos de performance\"\"\"\n\t# Container para gr√°ficos\n\tvar graphs_container = VBoxContainer.new()\n\tparent.add_child(graphs_container)\n\t\n\t# Gr√°fico de FPS\n\tvar fps_title = Label.new()\n\tfps_title.text = \"üìà FPS History:\"\n\tgraphs_container.add_child(fps_title)\n\t\n\tfps_graph = Control.new()\n\tfps_graph.custom_minimum_size = Vector2(graph_width, graph_height)\n\tfps_graph.draw.connect(_draw_fps_graph)\n\tgraphs_container.add_child(fps_graph)\n\t\n\t# Gr√°fico de Mem√≥ria\n\tvar memory_title = Label.new()\n\tmemory_title.text = \"üß† Memory History:\"\n\tgraphs_container.add_child(memory_title)\n\t\n\tmemory_graph = Control.new()\n\tmemory_graph.custom_minimum_size = Vector2(graph_width, graph_height)\n\tmemory_graph.draw.connect(_draw_memory_graph)\n\tgraphs_container.add_child(memory_graph)\n\nfunc setup_detailed_info(parent: VBoxContainer):\n\t\"\"\"Configura informa√ß√µes detalhadas\"\"\"\n\tvar separator = HSeparator.new()\n\tparent.add_child(separator)\n\t\n\tvar methods_title = Label.new()\n\tmethods_title.text = \"üîç Method Timings:\"\n\tparent.add_child(methods_title)\n\t\n\tmethod_list = ItemList.new()\n\tmethod_list.custom_minimum_size = Vector2(280, 100)\n\tparent.add_child(method_list)\n\nfunc toggle_dashboard():\n\t\"\"\"Alterna visibilidade do dashboard\"\"\"\n\tis_visible_dashboard = not is_visible_dashboard\n\tset_visible(is_visible_dashboard)\n\t\n\tif is_visible_dashboard:\n\t\tprofiler.start_profiling()\n\t\tprint(\"üìä Performance Dashboard ativado (F3 para desativar)\")\n\telse:\n\t\tprint(\"üìä Performance Dashboard desativado\")\n\nfunc toggle_detailed_info():\n\t\"\"\"Alterna informa√ß√µes detalhadas\"\"\"\n\tshow_detailed_info = not show_detailed_info\n\t\n\t# Recriar UI\n\tfor child in get_children():\n\t\tchild.queue_free()\n\t\n\tawait get_tree().process_frame\n\tsetup_ui()\n\nfunc update_dashboard():\n\t\"\"\"Atualiza todas as m√©tricas do dashboard\"\"\"\n\tupdate_metrics_labels()\n\tupdate_graphs()\n\tupdate_warnings()\n\t\n\tif show_detailed_info:\n\t\tupdate_method_timings()\n\nfunc update_metrics_labels():\n\t\"\"\"Atualiza labels de m√©tricas\"\"\"\n\t# FPS\n\tvar fps_stats = profiler.get_fps_stats()\n\tfps_label.text = \"üéÆ FPS: %.1f (avg: %.1f, min: %.1f)\" % [fps_stats.current, fps_stats.average, fps_stats.min]\n\t\n\t# Aplicar cor baseada na performance\n\tif fps_stats.current < 30:\n\t\tfps_label.modulate = Color.RED\n\telif fps_stats.current < 45:\n\t\tfps_label.modulate = Color.YELLOW\n\telse:\n\t\tfps_label.modulate = Color.GREEN\n\t\n\t# Mem√≥ria\n\tvar memory_stats = profiler.get_memory_stats()\n\tmemory_label.text = \"üß† Memory: %.1f MB (peak: %.1f MB)\" % [memory_stats.current_mb, memory_stats.peak_mb]\n\t\n\t# Aplicar cor baseada no uso de mem√≥ria\n\tif memory_stats.current_mb > 512:\n\t\tmemory_label.modulate = Color.RED\n\telif memory_stats.current_mb > 256:\n\t\tmemory_label.modulate = Color.YELLOW\n\telse:\n\t\tmemory_label.modulate = Color.GREEN\n\t\n\t# Frame Time\n\tvar frame_stats = profiler.get_frame_time_stats()\n\tframe_time_label.text = \"‚è±Ô∏è Frame: %.2f ms (avg: %.2f ms)\" % [frame_stats.current, frame_stats.average]\n\t\n\t# Aplicar cor baseada no frame time\n\tif frame_stats.current > 33.33:  # Pior que 30 FPS\n\t\tframe_time_label.modulate = Color.RED\n\telif frame_stats.current > 16.67:  # Pior que 60 FPS\n\t\tframe_time_label.modulate = Color.YELLOW\n\telse:\n\t\tframe_time_label.modulate = Color.GREEN\n\nfunc update_graphs():\n\t\"\"\"Atualiza gr√°ficos\"\"\"\n\tif fps_graph:\n\t\tfps_graph.queue_redraw()\n\tif memory_graph:\n\t\tmemory_graph.queue_redraw()\n\nfunc update_warnings():\n\t\"\"\"Atualiza alertas de performance\"\"\"\n\tvar warnings = profiler.get_performance_warnings()\n\t\n\tif warnings.is_empty():\n\t\twarnings_label.text = \"‚úÖ Nenhum alerta\"\n\t\twarnings_label.modulate = Color.GREEN\n\telse:\n\t\t# Mostrar √∫ltimos 3 alertas\n\t\tvar recent_warnings = warnings.slice(-3)\n\t\tvar warning_text = \"\"\n\t\t\n\t\tfor warning in recent_warnings:\n\t\t\twarning_text += \"‚Ä¢ %s\\n\" % warning.message\n\t\t\n\t\twarnings_label.text = warning_text.strip_edges()\n\t\twarnings_label.modulate = Color.RED\n\nfunc update_method_timings():\n\t\"\"\"Atualiza lista de timings de m√©todos\"\"\"\n\tif not method_list:\n\t\treturn\n\t\n\tmethod_list.clear()\n\t\n\tvar method_stats = profiler.get_all_method_stats()\n\tvar sorted_methods = []\n\t\n\t# Ordenar por tempo m√©dio\n\tfor method_name in method_stats.keys():\n\t\tvar stats = method_stats[method_name]\n\t\tsorted_methods.append({\"name\": method_name, \"stats\": stats})\n\t\n\tsorted_methods.sort_custom(func(a, b): return a.stats.average > b.stats.average)\n\t\n\t# Adicionar √† lista\n\tfor method_data in sorted_methods:\n\t\tvar name = method_data.name\n\t\tvar stats = method_data.stats\n\t\tvar item_text = \"%s: %.2f ms (avg)\" % [name, stats.average]\n\t\tmethod_list.add_item(item_text)\n\nfunc _draw_fps_graph():\n\t\"\"\"Desenha gr√°fico de FPS\"\"\"\n\tvar history = profiler.fps_history\n\tif history.size() < 2:\n\t\treturn\n\t\n\t_draw_line_graph(fps_graph, history, fps_color, 0, 120)  # 0-120 FPS\n\nfunc _draw_memory_graph():\n\t\"\"\"Desenha gr√°fico de mem√≥ria\"\"\"\n\tvar history = profiler.memory_history\n\tif history.size() < 2:\n\t\treturn\n\t\n\t# Converter para MB\n\tvar memory_mb = []\n\tfor memory in history:\n\t\tmemory_mb.append(memory / (1024.0 * 1024.0))\n\t\n\t_draw_line_graph(memory_graph, memory_mb, memory_color, 0, 1024)  # 0-1024 MB\n\nfunc _draw_line_graph(control: Control, data: Array, color: Color, min_val: float, max_val: float):\n\t\"\"\"Desenha um gr√°fico de linha gen√©rico\"\"\"\n\tvar rect = control.get_rect()\n\tvar points = PackedVector2Array()\n\t\n\t# Calcular pontos\n\tfor i in range(data.size()):\n\t\tvar x = (float(i) / (data.size() - 1)) * rect.size.x\n\t\tvar normalized_y = (data[i] - min_val) / (max_val - min_val)\n\t\tnormalized_y = clamp(normalized_y, 0.0, 1.0)\n\t\tvar y = rect.size.y - (normalized_y * rect.size.y)\n\t\t\n\t\tpoints.append(Vector2(x, y))\n\t\n\t# Desenhar linhas\n\tfor i in range(points.size() - 1):\n\t\tcontrol.draw_line(points[i], points[i + 1], color, 2.0)\n\t\n\t# Desenhar pontos\n\tfor point in points:\n\t\tcontrol.draw_circle(point, 2.0, color)\n\nfunc generate_performance_summary() -> String:\n\t\"\"\"Gera um resumo de performance para exibi√ß√£o\"\"\"\n\tvar fps_stats = profiler.get_fps_stats()\n\tvar memory_stats = profiler.get_memory_stats()\n\tvar frame_stats = profiler.get_frame_time_stats()\n\t\n\tvar summary = \"üìä RESUMO DE PERFORMANCE\\n\"\n\tsummary += \"FPS: %.1f (min: %.1f)\\n\" % [fps_stats.current, fps_stats.min]\n\tsummary += \"Memory: %.1f MB\\n\" % memory_stats.current_mb\n\tsummary += \"Frame: %.2f ms\\n\" % frame_stats.current\n\t\n\tvar warnings = profiler.get_performance_warnings()\n\tif warnings.size() > 0:\n\t\tsummary += \"Alertas: %d\" % warnings.size()\n\telse:\n\t\tsummary += \"Status: OK\"\n\t\n\treturn summary\n\nfunc cleanup():\n\t\"\"\"Limpa recursos do dashboard\"\"\"\n\tset_visible(false)\n\tis_visible_dashboard = false\n\tqueue_free()\n"