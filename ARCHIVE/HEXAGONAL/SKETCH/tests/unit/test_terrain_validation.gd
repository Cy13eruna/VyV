## Test Terrain Validation - Testes de ValidaÃ§Ã£o de Terreno\n## Cobertura: SharedGameState, bloqueio de terreno, validaÃ§Ã£o de movimento\n\nextends \"res://tests/test_framework.gd\"\n\nconst SharedGameState = preload(\"res://scripts/systems/shared_game_state.gd\")\n\n# Mock classes para testes\nclass MockHexGrid:\n\tvar dot_positions = [\n\t\tVector2(0, 0),    # Star 0\n\t\tVector2(30, 0),   # Star 1 - adjacente\n\t\tVector2(60, 0),   # Star 2 - adjacente a 1\n\t\tVector2(0, 30),   # Star 3 - adjacente a 0\n\t\tVector2(100, 0)   # Star 4 - distante\n\t]\n\t\n\tvar cache = MockCache.new()\n\t\n\tfunc get_dot_positions():\n\t\treturn dot_positions\n\nclass MockCache:\n\tvar diamond_colors = [\n\t\tColor(0.0, 1.0, 0.0, 1.0),  # Verde - livre\n\t\tColor(0.0, 1.0, 1.0, 1.0),  # Azul - Ã¡gua (bloqueado)\n\t\tColor(0.4, 0.4, 0.4, 1.0),  # Cinza - montanha (bloqueado)\n\t\tColor(0.0, 1.0, 0.0, 1.0)   # Verde - livre\n\t]\n\t\n\tvar connections = [\n\t\t{\"index_a\": 0, \"index_b\": 1},  # ConexÃ£o 0-1 (verde)\n\t\t{\"index_a\": 1, \"index_b\": 2},  # ConexÃ£o 1-2 (Ã¡gua)\n\t\t{\"index_a\": 0, \"index_b\": 3},  # ConexÃ£o 0-3 (montanha)\n\t\t{\"index_a\": 3, \"index_b\": 4}   # ConexÃ£o 3-4 (verde)\n\t]\n\t\n\tfunc get_diamond_colors():\n\t\treturn diamond_colors\n\t\n\tfunc get_connections():\n\t\treturn connections\n\nclass MockStarMapper:\n\tpass\n\nclass MockParentNode:\n\tpass\n\nvar shared_game_state: SharedGameState\nvar mock_hex_grid: MockHexGrid\nvar mock_star_mapper: MockStarMapper\nvar mock_parent_node: MockParentNode\n\nfunc setup():\n\t# Setup para cada teste\n\tmock_hex_grid = MockHexGrid.new()\n\tmock_star_mapper = MockStarMapper.new()\n\tmock_parent_node = MockParentNode.new()\n\t\n\tshared_game_state = SharedGameState.new()\n\tshared_game_state.setup(mock_hex_grid, mock_star_mapper, mock_parent_node)\n\nfunc test_terrain_validation_setup():\n\t# Teste de configuraÃ§Ã£o bÃ¡sica\n\tsetup()\n\t\n\tassert_not_null(shared_game_state, \"SharedGameState deve ser criado\")\n\tassert_not_null(shared_game_state.hex_grid, \"HexGrid deve ser configurado\")\n\nfunc test_movement_validation_free_terrain():\n\t# Teste de movimento em terreno livre\n\tsetup()\n\t\n\t# Movimento de 0 para 1 (terreno verde - livre)\n\tvar is_valid = shared_game_state.is_movement_valid(0, 1)\n\tassert_true(is_valid, \"Movimento em terreno livre deve ser vÃ¡lido\")\n\nfunc test_movement_validation_water_blocked():\n\t# Teste de bloqueio por Ã¡gua\n\tsetup()\n\t\n\t# Movimento de 1 para 2 (terreno azul - Ã¡gua)\n\tvar is_valid = shared_game_state.is_movement_valid(1, 2)\n\tassert_false(is_valid, \"Movimento atravÃ©s de Ã¡gua deve ser bloqueado\")\n\nfunc test_movement_validation_mountain_blocked():\n\t# Teste de bloqueio por montanha\n\tsetup()\n\t\n\t# Movimento de 0 para 3 (terreno cinza - montanha)\n\tvar is_valid = shared_game_state.is_movement_valid(0, 3)\n\tassert_false(is_valid, \"Movimento atravÃ©s de montanha deve ser bloqueado\")\n\nfunc test_movement_validation_distance_check():\n\t# Teste de verificaÃ§Ã£o de distÃ¢ncia\n\tsetup()\n\t\n\t# Movimento de 0 para 4 (muito distante)\n\tvar is_valid = shared_game_state.is_movement_valid(0, 4)\n\tassert_false(is_valid, \"Movimento muito distante deve ser invÃ¡lido\")\n\nfunc test_get_terrain_between_stars():\n\t# Teste de obtenÃ§Ã£o de cor do terreno\n\tsetup()\n\t\n\t# Terreno entre 0 e 1 (verde)\n\tvar terrain_color = shared_game_state._get_terrain_between_stars(0, 1)\n\tassert_true(terrain_color.is_equal_approx(Color(0.0, 1.0, 0.0, 1.0)), \"Cor do terreno deve ser verde\")\n\t\n\t# Terreno entre 1 e 2 (azul - Ã¡gua)\n\tterrain_color = shared_game_state._get_terrain_between_stars(1, 2)\n\tassert_true(terrain_color.is_equal_approx(Color(0.0, 1.0, 1.0, 1.0)), \"Cor do terreno deve ser azul\")\n\nfunc test_adjacent_stars_calculation():\n\t# Teste de cÃ¡lculo de estrelas adjacentes\n\tsetup()\n\t\n\tvar adjacent_stars = shared_game_state.get_adjacent_stars(0)\n\tassert_true(adjacent_stars.size() > 0, \"Deve haver estrelas adjacentes\")\n\tassert_true(1 in adjacent_stars, \"Estrela 1 deve ser adjacente Ã  0\")\n\tassert_true(3 in adjacent_stars, \"Estrela 3 deve ser adjacente Ã  0\")\n\tassert_false(4 in adjacent_stars, \"Estrela 4 nÃ£o deve ser adjacente Ã  0\")\n\nfunc test_star_occupation_check():\n\t# Teste de verificaÃ§Ã£o de ocupaÃ§Ã£o de estrela\n\tsetup()\n\t\n\t# Mock de unidades\n\tvar mock_units = [\n\t\t{\"get_current_star_id\": func(): return 1},\n\t\t{\"get_current_star_id\": func(): return 3}\n\t]\n\t\n\tvar is_occupied_1 = shared_game_state.is_star_occupied(1, mock_units)\n\tvar is_occupied_2 = shared_game_state.is_star_occupied(2, mock_units)\n\t\n\tassert_true(is_occupied_1, \"Estrela 1 deve estar ocupada\")\n\tassert_false(is_occupied_2, \"Estrela 2 nÃ£o deve estar ocupada\")\n\nfunc test_board_center_calculation():\n\t# Teste de cÃ¡lculo do centro do tabuleiro\n\tsetup()\n\t\n\tvar center = shared_game_state.get_board_center()\n\tassert_not_null(center, \"Centro deve ser calculado\")\n\tassert_true(center is Vector2, \"Centro deve ser um Vector2\")\n\nfunc test_farthest_stars_finding():\n\t# Teste de encontrar estrelas mais distantes\n\tsetup()\n\t\n\tvar farthest_stars = shared_game_state.find_farthest_stars(2)\n\tassert_equal(farthest_stars.size(), 2, \"Deve retornar 2 estrelas mais distantes\")\n\t\n\t# Verificar se estÃ£o ordenadas por distÃ¢ncia\n\tif farthest_stars.size() >= 2:\n\t\tassert_true(farthest_stars[0].distance >= farthest_stars[1].distance, \"Deve estar ordenado por distÃ¢ncia\")\n\nfunc test_map_width_calculation():\n\t# Teste de cÃ¡lculo de largura do mapa\n\tsetup()\n\t\n\tvar width_6_domains = shared_game_state.get_map_width_for_domains(6)\n\tvar width_4_domains = shared_game_state.get_map_width_for_domains(4)\n\tvar width_unknown = shared_game_state.get_map_width_for_domains(10)\n\t\n\tassert_equal(width_6_domains, 13, \"6 domÃ­nios deve ter largura 13\")\n\tassert_equal(width_4_domains, 9, \"4 domÃ­nios deve ter largura 9\")\n\tassert_equal(width_unknown, 7, \"Valor desconhecido deve retornar padrÃ£o 7\")\n\nfunc test_turn_manager_functionality():\n\t# Teste de funcionalidade do TurnManager\n\tsetup()\n\t\n\tvar turn_manager = shared_game_state.turn_manager\n\tturn_manager.setup(3)  # 3 jogadores\n\t\n\tassert_equal(turn_manager.get_current_player(), 1, \"Deve comeÃ§ar com jogador 1\")\n\tassert_equal(turn_manager.get_current_turn(), 1, \"Deve comeÃ§ar no turno 1\")\n\t\n\tturn_manager.next_turn()\n\tassert_equal(turn_manager.get_current_player(), 2, \"Deve avanÃ§ar para jogador 2\")\n\t\n\tturn_manager.next_turn()\n\tturn_manager.next_turn()\n\tassert_equal(turn_manager.get_current_player(), 1, \"Deve voltar para jogador 1\")\n\tassert_equal(turn_manager.get_current_turn(), 2, \"Deve avanÃ§ar para turno 2\")\n\nfunc test_terrain_validation_edge_cases():\n\t# Teste de casos extremos\n\tsetup()\n\t\n\t# Estrelas invÃ¡lidas\n\tvar is_valid_negative = shared_game_state.is_movement_valid(-1, 0)\n\tvar is_valid_out_of_bounds = shared_game_state.is_movement_valid(0, 999)\n\t\n\tassert_false(is_valid_negative, \"Estrela negativa deve ser invÃ¡lida\")\n\tassert_false(is_valid_out_of_bounds, \"Estrela fora dos limites deve ser invÃ¡lida\")\n\t\n\t# Movimento para a mesma estrela\n\tvar is_valid_same = shared_game_state.is_movement_valid(0, 0)\n\tassert_false(is_valid_same, \"Movimento para a mesma estrela deve ser invÃ¡lido\")\n\nfunc test_cleanup_functionality():\n\t# Teste de limpeza\n\tsetup()\n\t\n\t# Verificar se cleanup nÃ£o causa erros\n\tshared_game_state.cleanup()\n\t\n\t# ApÃ³s cleanup, referÃªncias devem ser null\n\tassert_null(shared_game_state.hex_grid, \"HexGrid deve ser null apÃ³s cleanup\")\n\tassert_null(shared_game_state.star_mapper, \"StarMapper deve ser null apÃ³s cleanup\")\n\nfunc run_all_tests():\n\tprint(\"ğŸ§ª Executando Testes de ValidaÃ§Ã£o de Terreno...\")\n\t\n\ttest_terrain_validation_setup()\n\ttest_movement_validation_free_terrain()\n\ttest_movement_validation_water_blocked()\n\ttest_movement_validation_mountain_blocked()\n\ttest_movement_validation_distance_check()\n\ttest_get_terrain_between_stars()\n\ttest_adjacent_stars_calculation()\n\ttest_star_occupation_check()\n\ttest_board_center_calculation()\n\ttest_farthest_stars_finding()\n\ttest_map_width_calculation()\n\ttest_turn_manager_functionality()\n\ttest_terrain_validation_edge_cases()\n\ttest_cleanup_functionality()\n\t\n\tprint(\"âœ… Todos os testes de ValidaÃ§Ã£o de Terreno passaram!\")\n"