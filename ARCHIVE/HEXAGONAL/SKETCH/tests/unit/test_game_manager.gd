## Testes unitários para GameManager com Error Handling\nextends RefCounted\n\nconst TestFramework = preload(\"res://tests/test_framework.gd\")\nconst GameManager = preload(\"res://scripts/game/game_manager.gd\")\nconst Result = preload(\"res://scripts/core/result.gd\")\n\n## Variáveis de teste\nstatic var game_manager: GameManager\nstatic var mock_hex_grid\nstatic var mock_star_mapper\nstatic var mock_parent_node\n\n## Executar todos os testes do GameManager\nstatic func run_all_tests() -> void:\n\tTestFramework.start_test_suite(\"GameManager Error Handling\")\n\t\n\t# Testes de configuração\n\tTestFramework.run_test(\"test_setup_references_success\", test_setup_references_success)\n\tTestFramework.run_test(\"test_setup_references_null_params\", test_setup_references_null_params)\n\t\n\t# Testes de criação de unidades\n\tTestFramework.run_test(\"test_create_unit_without_references\", test_create_unit_without_references)\n\tTestFramework.run_test(\"test_create_unit_invalid_star_id\", test_create_unit_invalid_star_id)\n\tTestFramework.run_test(\"test_create_unit_success\", test_create_unit_success)\n\tTestFramework.run_test(\"test_create_unit_max_limit\", test_create_unit_max_limit)\n\t\n\t# Testes de movimento\n\tTestFramework.run_test(\"test_move_unit_null_unit\", test_move_unit_null_unit)\n\tTestFramework.run_test(\"test_move_unit_invalid_star\", test_move_unit_invalid_star)\n\tTestFramework.run_test(\"test_move_unit_not_positioned\", test_move_unit_not_positioned)\n\t\n\t# Testes de validação\n\tTestFramework.run_test(\"test_validate_star_id\", test_validate_star_id)\n\tTestFramework.run_test(\"test_validate_references\", test_validate_references)\n\t\n\tTestFramework.end_test_suite()\n\n## Setup para testes\nstatic func _setup_test() -> void:\n\tgame_manager = GameManager.new()\n\t\n\t# Criar mocks simples\n\tmock_hex_grid = MockHexGrid.new()\n\tmock_star_mapper = MockStarMapper.new()\n\tmock_parent_node = MockParentNode.new()\n\n## Cleanup após testes\nstatic func _cleanup_test() -> void:\n\tif game_manager:\n\t\tgame_manager.clear_all_entities()\n\t\tgame_manager = null\n\t\n\tmock_hex_grid = null\n\tmock_star_mapper = null\n\tmock_parent_node = null\n\n## Teste: setup_references com sucesso\nstatic func test_setup_references_success() -> void:\n\t_setup_test()\n\t\n\tvar result = game_manager.setup_references(mock_hex_grid, mock_star_mapper, mock_parent_node)\n\t\n\tTestFramework.assert_true(result.is_success(), \"Setup deve ser bem-sucedido\")\n\tTestFramework.assert_equal(true, result.get_value(), \"Valor de retorno deve ser true\")\n\t\n\t_cleanup_test()\n\n## Teste: setup_references com parâmetros null\nstatic func test_setup_references_null_params() -> void:\n\t_setup_test()\n\t\n\t# Teste com hex_grid null\n\tvar result1 = game_manager.setup_references(null, mock_star_mapper, mock_parent_node)\n\tTestFramework.assert_true(result1.is_error(), \"Deve falhar com hex_grid null\")\n\tTestFramework.assert_true(result1.get_error().contains(\"hex_grid\"), \"Erro deve mencionar hex_grid\")\n\t\n\t# Teste com star_mapper null\n\tvar result2 = game_manager.setup_references(mock_hex_grid, null, mock_parent_node)\n\tTestFramework.assert_true(result2.is_error(), \"Deve falhar com star_mapper null\")\n\tTestFramework.assert_true(result2.get_error().contains(\"star_mapper\"), \"Erro deve mencionar star_mapper\")\n\t\n\t# Teste com parent_node null\n\tvar result3 = game_manager.setup_references(mock_hex_grid, mock_star_mapper, null)\n\tTestFramework.assert_true(result3.is_error(), \"Deve falhar com parent_node null\")\n\tTestFramework.assert_true(result3.get_error().contains(\"parent_node\"), \"Erro deve mencionar parent_node\")\n\t\n\t_cleanup_test()\n\n## Teste: create_unit sem referências configuradas\nstatic func test_create_unit_without_references() -> void:\n\t_setup_test()\n\t\n\tvar result = game_manager.create_unit()\n\t\n\tTestFramework.assert_true(result.is_error(), \"Deve falhar sem referências\")\n\tTestFramework.assert_true(result.get_error().contains(\"Referências não configuradas\"), \"Erro deve mencionar referências\")\n\t\n\t_cleanup_test()\n\n## Teste: create_unit com star_id inválido\nstatic func test_create_unit_invalid_star_id() -> void:\n\t_setup_test()\n\tgame_manager.setup_references(mock_hex_grid, mock_star_mapper, mock_parent_node)\n\t\n\t# Teste com star_id negativo\n\tvar result1 = game_manager.create_unit(-5)\n\tTestFramework.assert_true(result1.is_error(), \"Deve falhar com star_id negativo\")\n\tTestFramework.assert_true(result1.get_error().contains(\"inválido\"), \"Erro deve mencionar ID inválido\")\n\t\n\t# Teste com star_id fora do range\n\tvar result2 = game_manager.create_unit(1000)\n\tTestFramework.assert_true(result2.is_error(), \"Deve falhar com star_id fora do range\")\n\tTestFramework.assert_true(result2.get_error().contains(\"fora do range\"), \"Erro deve mencionar range\")\n\t\n\t_cleanup_test()\n\n## Teste: create_unit com sucesso\nstatic func test_create_unit_success() -> void:\n\t_setup_test()\n\tgame_manager.setup_references(mock_hex_grid, mock_star_mapper, mock_parent_node)\n\t\n\tvar result = game_manager.create_unit(5)\n\t\n\tTestFramework.assert_true(result.is_success(), \"Criação deve ser bem-sucedida\")\n\tTestFramework.assert_not_null(result.get_value(), \"Unidade criada deve existir\")\n\t\n\t_cleanup_test()\n\n## Teste: create_unit atingindo limite máximo\nstatic func test_create_unit_max_limit() -> void:\n\t_setup_test()\n\tgame_manager.setup_references(mock_hex_grid, mock_star_mapper, mock_parent_node)\n\t\n\t# Criar unidades até o limite\n\tfor i in range(game_manager.max_units_per_player):\n\t\tvar result = game_manager.create_unit()\n\t\tTestFramework.assert_true(result.is_success(), \"Criação %d deve ser bem-sucedida\" % i)\n\t\n\t# Tentar criar uma unidade a mais\n\tvar result_over_limit = game_manager.create_unit()\n\tTestFramework.assert_true(result_over_limit.is_error(), \"Deve falhar ao exceder limite\")\n\tTestFramework.assert_true(result_over_limit.get_error().contains(\"Limite máximo\"), \"Erro deve mencionar limite\")\n\t\n\t_cleanup_test()\n\n## Teste: move_unit com unidade null\nstatic func test_move_unit_null_unit() -> void:\n\t_setup_test()\n\tgame_manager.setup_references(mock_hex_grid, mock_star_mapper, mock_parent_node)\n\t\n\tvar result = game_manager.move_unit_to_star(null, 5)\n\t\n\tTestFramework.assert_true(result.is_error(), \"Deve falhar com unidade null\")\n\tTestFramework.assert_true(result.get_error().contains(\"null\"), \"Erro deve mencionar null\")\n\t\n\t_cleanup_test()\n\n## Teste: move_unit com star_id inválido\nstatic func test_move_unit_invalid_star() -> void:\n\t_setup_test()\n\tgame_manager.setup_references(mock_hex_grid, mock_star_mapper, mock_parent_node)\n\t\n\t# Criar uma unidade\n\tvar unit_result = game_manager.create_unit(5)\n\tTestFramework.assert_true(unit_result.is_success(), \"Unidade deve ser criada\")\n\t\n\tvar unit = unit_result.get_value()\n\t\n\t# Tentar mover para star_id inválido\n\tvar result = game_manager.move_unit_to_star(unit, -1)\n\tTestFramework.assert_true(result.is_error(), \"Deve falhar com star_id inválido\")\n\tTestFramework.assert_true(result.get_error().contains(\"inválido\"), \"Erro deve mencionar ID inválido\")\n\t\n\t_cleanup_test()\n\n## Teste: move_unit com unidade não posicionada\nstatic func test_move_unit_not_positioned() -> void:\n\t_setup_test()\n\tgame_manager.setup_references(mock_hex_grid, mock_star_mapper, mock_parent_node)\n\t\n\t# Criar uma unidade sem posicioná-la\n\tvar unit_result = game_manager.create_unit()\n\tTestFramework.assert_true(unit_result.is_success(), \"Unidade deve ser criada\")\n\t\n\tvar unit = unit_result.get_value()\n\t\n\t# Tentar mover unidade não posicionada\n\tvar result = game_manager.move_unit_to_star(unit, 10)\n\tTestFramework.assert_true(result.is_error(), \"Deve falhar com unidade não posicionada\")\n\tTestFramework.assert_true(result.get_error().contains(\"não está posicionada\"), \"Erro deve mencionar posicionamento\")\n\t\n\t_cleanup_test()\n\n## Teste: validação de star_id\nstatic func test_validate_star_id() -> void:\n\t_setup_test()\n\tgame_manager.setup_references(mock_hex_grid, mock_star_mapper, mock_parent_node)\n\t\n\t# Teste com ID válido\n\tvar result1 = game_manager._validate_star_id(5)\n\tTestFramework.assert_true(result1.is_success(), \"ID válido deve passar\")\n\t\n\t# Teste com ID negativo\n\tvar result2 = game_manager._validate_star_id(-1)\n\tTestFramework.assert_true(result2.is_error(), \"ID negativo deve falhar\")\n\t\n\t# Teste com ID fora do range\n\tvar result3 = game_manager._validate_star_id(1000)\n\tTestFramework.assert_true(result3.is_error(), \"ID fora do range deve falhar\")\n\t\n\t_cleanup_test()\n\n## Teste: validação de referências\nstatic func test_validate_references() -> void:\n\t_setup_test()\n\t\n\t# Teste sem referências\n\tvar result1 = game_manager._validate_references()\n\tTestFramework.assert_true(result1.is_error(), \"Deve falhar sem referências\")\n\t\n\t# Teste com referências configuradas\n\tgame_manager.setup_references(mock_hex_grid, mock_star_mapper, mock_parent_node)\n\tvar result2 = game_manager._validate_references()\n\tTestFramework.assert_true(result2.is_success(), \"Deve passar com referências\")\n\t\n\t_cleanup_test()\n\n## Classes Mock para testes\n\nclass MockHexGrid:\n\tfunc get_dot_positions():\n\t\treturn [Vector2(0, 0), Vector2(10, 0), Vector2(20, 0)]\n\t\n\tfunc to_local(pos):\n\t\treturn pos\n\t\n\tfunc to_global(pos):\n\t\treturn pos\n\nclass MockStarMapper:\n\tfunc get_star_count():\n\t\treturn 100\n\t\n\tfunc get_star_position(star_id):\n\t\treturn Vector2(star_id * 10, 0)\n\t\n\tfunc map_stars(positions):\n\t\tpass\n\nclass MockParentNode:\n\tfunc add_child(child):\n\t\tpass\n\t\n\tfunc remove_child(child):\n\t\tpass\n"